"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.W3C_WEB_ELEMENT_IDENTIFIER = exports.MiB = exports.KiB = exports.GiB = void 0;
exports.cancellableDelay = cancellableDelay;
exports.coerceVersion = coerceVersion;
exports.compareVersions = compareVersions;
exports.escapeSpace = escapeSpace;
exports.escapeSpecialChars = escapeSpecialChars;
exports.filterObject = filterObject;
exports.getLockFileGuard = getLockFileGuard;
exports.hasContent = hasContent;
exports.hasValue = hasValue;
exports.isSameDestination = isSameDestination;
exports.isSubPath = isSubPath;
exports.jsonStringify = jsonStringify;
exports.localIp = localIp;
exports.multiResolve = multiResolve;
exports.pluralize = pluralize;
exports.quote = quote;
exports.safeJsonParse = safeJsonParse;
Object.defineProperty(exports, "shellParse", {
  enumerable: true,
  get: function () {
    return _shellQuote.parse;
  }
});
exports.toInMemoryBase64 = toInMemoryBase64;
exports.toReadableSizeString = toReadableSizeString;
exports.unleakString = unleakString;
exports.unwrapElement = unwrapElement;
Object.defineProperty(exports, "uuidV1", {
  enumerable: true,
  get: function () {
    return _uuid.v1;
  }
});
Object.defineProperty(exports, "uuidV3", {
  enumerable: true,
  get: function () {
    return _uuid.v3;
  }
});
Object.defineProperty(exports, "uuidV4", {
  enumerable: true,
  get: function () {
    return _uuid.v4;
  }
});
Object.defineProperty(exports, "uuidV5", {
  enumerable: true,
  get: function () {
    return _uuid.v5;
  }
});
exports.wrapElement = wrapElement;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("./fs"));

var _semver = _interopRequireDefault(require("semver"));

var _shellQuote = require("shell-quote");

var _pluralize = _interopRequireDefault(require("pluralize"));

var _stream = _interopRequireDefault(require("stream"));

var _base64Stream = require("base64-stream");

var _uuid = require("uuid");

var _lockfile2 = _interopRequireDefault(require("lockfile"));

const W3C_WEB_ELEMENT_IDENTIFIER = 'element-6066-11e4-a52e-4f735466cecf';
exports.W3C_WEB_ELEMENT_IDENTIFIER = W3C_WEB_ELEMENT_IDENTIFIER;
const KiB = 1024;
exports.KiB = KiB;
const MiB = KiB * 1024;
exports.MiB = MiB;
const GiB = MiB * 1024;
exports.GiB = GiB;

function hasContent(val) {
  return _lodash.default.isString(val) && val !== '';
}

function hasValue(val) {
  let hasVal = false;

  if (_lodash.default.isNumber(val)) {
    hasVal = !_lodash.default.isNaN(val);
  } else {
    hasVal = !_lodash.default.isUndefined(val) && !_lodash.default.isNull(val);
  }

  return hasVal;
}

function escapeSpace(str) {
  return str.split(/ /).join('\\ ');
}

function escapeSpecialChars(str, quoteEscape) {
  if (typeof str !== 'string') {
    return str;
  }

  if (typeof quoteEscape === 'undefined') {
    quoteEscape = false;
  }

  str = str.replace(/[\\]/g, '\\\\').replace(/[\/]/g, '\\/').replace(/[\b]/g, '\\b').replace(/[\f]/g, '\\f').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r').replace(/[\t]/g, '\\t').replace(/[\"]/g, '\\"').replace(/\\'/g, "\\'");

  if (quoteEscape) {
    let re = new RegExp(quoteEscape, 'g');
    str = str.replace(re, `\\${quoteEscape}`);
  }

  return str;
}

function localIp() {
  let ip = _lodash.default.chain(_os.default.networkInterfaces()).values().flatten().filter(function (val) {
    return val.family === 'IPv4' && val.internal === false;
  }).map('address').first().value();

  return ip;
}

function cancellableDelay(ms) {
  let timer;
  let resolve;
  let reject;
  const delay = new _bluebird.default.Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
    timer = setTimeout(function () {
      resolve();
    }, ms);
  });

  delay.cancel = function () {
    clearTimeout(timer);
    reject(new _bluebird.default.CancellationError());
  };

  return delay;
}

function multiResolve(roots, ...args) {
  return roots.map(root => _path.default.resolve(root, ...args));
}

function safeJsonParse(obj) {
  try {
    return JSON.parse(obj);
  } catch (ign) {
    return obj;
  }
}

function jsonStringify(obj, replacer, space = 2) {
  if (!_lodash.default.isFunction(replacer)) {
    replacer = (k, v) => v;
  }

  const bufferToJSON = Buffer.prototype.toJSON;
  delete Buffer.prototype.toJSON;

  try {
    return JSON.stringify(obj, (key, value) => {
      const updatedValue = Buffer.isBuffer(value) ? value.toString('utf8') : value;
      return replacer(key, updatedValue);
    }, space);
  } finally {
    Buffer.prototype.toJSON = bufferToJSON;
  }
}

function unwrapElement(el) {
  for (const propName of [W3C_WEB_ELEMENT_IDENTIFIER, 'ELEMENT']) {
    if (_lodash.default.has(el, propName)) {
      return el[propName];
    }
  }

  return el;
}

function wrapElement(elementId) {
  return {
    ELEMENT: elementId,
    [W3C_WEB_ELEMENT_IDENTIFIER]: elementId
  };
}

function filterObject(obj, predicate) {
  let newObj = _lodash.default.clone(obj);

  if (_lodash.default.isUndefined(predicate)) {
    predicate = v => !_lodash.default.isUndefined(v);
  } else if (!_lodash.default.isFunction(predicate)) {
    const valuePredicate = predicate;

    predicate = v => v === valuePredicate;
  }

  for (const key of Object.keys(obj)) {
    if (!predicate(obj[key], obj)) {
      delete newObj[key];
    }
  }

  return newObj;
}

function toReadableSizeString(bytes) {
  const intBytes = parseInt(String(bytes), 10);

  if (isNaN(intBytes) || intBytes < 0) {
    throw new Error(`Cannot convert '${bytes}' to a readable size format`);
  }

  if (intBytes >= GiB) {
    return `${(intBytes / (GiB * 1.0)).toFixed(2)} GB`;
  } else if (intBytes >= MiB) {
    return `${(intBytes / (MiB * 1.0)).toFixed(2)} MB`;
  } else if (intBytes >= KiB) {
    return `${(intBytes / (KiB * 1.0)).toFixed(2)} KB`;
  }

  return `${intBytes} B`;
}

function isSubPath(originalPath, root, forcePosix = null) {
  const pathObj = forcePosix ? _path.default.posix : _path.default;

  for (const p of [originalPath, root]) {
    if (!pathObj.isAbsolute(p)) {
      throw new Error(`'${p}' is expected to be an absolute path`);
    }
  }

  const normalizedRoot = pathObj.normalize(root);
  const normalizedPath = pathObj.normalize(originalPath);
  return normalizedPath.startsWith(normalizedRoot);
}

async function isSameDestination(path1, path2, ...pathN) {
  const allPaths = [path1, path2, ...pathN];

  if (!(await _bluebird.default.reduce(allPaths, async (a, b) => a && (await _fs.default.exists(b)), true))) {
    return false;
  }

  const areAllItemsEqual = arr => !!arr.reduce((a, b) => a === b ? a : NaN);

  if (areAllItemsEqual(allPaths)) {
    return true;
  }

  let mapCb = async x => (await _fs.default.stat(x, {
    bigint: true
  })).ino;

  return areAllItemsEqual(await _bluebird.default.map(allPaths, mapCb));
}

function coerceVersion(ver, strict = true) {
  const result = _semver.default.valid(_semver.default.coerce(`${ver}`));

  if (strict && !result) {
    throw new Error(`'${ver}' cannot be coerced to a valid version number`);
  }

  return result;
}

const SUPPORTED_OPERATORS = ['==', '!=', '>', '<', '>=', '<=', '='];

function compareVersions(ver1, operator, ver2) {
  if (!SUPPORTED_OPERATORS.includes(operator)) {
    throw new Error(`The '${operator}' comparison operator is not supported. ` + `Only '${JSON.stringify(SUPPORTED_OPERATORS)}' operators are supported`);
  }

  const semverOperator = ['==', '!='].includes(operator) ? '=' : operator;

  const result = _semver.default.satisfies(coerceVersion(ver1), `${semverOperator}${coerceVersion(ver2)}`);

  return operator === '!=' ? !result : result;
}

function quote(args) {
  return (0, _shellQuote.quote)(_lodash.default.castArray(args));
}

function unleakString(s) {
  return ` ${s}`.substr(1);
}

function pluralize(word, count, options = {}) {
  let inclusive = false;

  if (_lodash.default.isBoolean(options)) {
    inclusive = options;
  } else if (_lodash.default.isBoolean(options === null || options === void 0 ? void 0 : options.inclusive)) {
    inclusive = options.inclusive;
  }

  return (0, _pluralize.default)(word, count, inclusive);
}

async function toInMemoryBase64(srcPath, opts = {}) {
  if (!(await _fs.default.exists(srcPath)) || (await _fs.default.stat(srcPath)).isDirectory()) {
    throw new Error(`No such file: ${srcPath}`);
  }

  const {
    maxSize = 1 * GiB
  } = opts;
  const resultBuffers = [];
  let resultBuffersSize = 0;
  const resultWriteStream = new _stream.default.Writable({
    write: (buffer, encoding, next) => {
      resultBuffers.push(buffer);
      resultBuffersSize += buffer.length;

      if (maxSize > 0 && resultBuffersSize > maxSize) {
        resultWriteStream.emit('error', new Error(`The size of the resulting ` + `buffer must not be greater than ${toReadableSizeString(maxSize)}`));
      }

      next();
    }
  });

  const readerStream = _fs.default.createReadStream(srcPath);

  const base64EncoderStream = new _base64Stream.Base64Encode();
  const resultWriteStreamPromise = new _bluebird.default((resolve, reject) => {
    resultWriteStream.once('error', e => {
      readerStream.unpipe(base64EncoderStream);
      base64EncoderStream.unpipe(resultWriteStream);
      readerStream.destroy();
      reject(e);
    });
    resultWriteStream.once('finish', resolve);
  });
  const readStreamPromise = new _bluebird.default((resolve, reject) => {
    readerStream.once('close', resolve);
    readerStream.once('error', e => reject(new Error(`Failed to read '${srcPath}': ${e.message}`)));
  });
  readerStream.pipe(base64EncoderStream);
  base64EncoderStream.pipe(resultWriteStream);
  await _bluebird.default.all([readStreamPromise, resultWriteStreamPromise]);
  return Buffer.concat(resultBuffers);
}

function getLockFileGuard(lockFile, opts = {}) {
  const {
    timeout = 120,
    tryRecovery = false
  } = opts;

  const lock = _bluebird.default.promisify(_lockfile2.default.lock);

  const check = _bluebird.default.promisify(_lockfile2.default.check);

  const unlock = _bluebird.default.promisify(_lockfile2.default.unlock);

  const guard = async behavior => {
    let triedRecovery = false;

    do {
      try {
        if (_lockfile2.default.checkSync(lockFile)) {
          await lock(lockFile, {
            wait: timeout * 1000
          });
        } else {
          _lockfile2.default.lockSync(lockFile);
        }

        break;
      } catch (e) {
        if (_lodash.default.includes(e.message, 'EEXIST') && tryRecovery && !triedRecovery) {
          _lockfile2.default.unlockSync(lockFile);

          triedRecovery = true;
          continue;
        }

        throw new Error(`Could not acquire lock on '${lockFile}' after ${timeout}s. ` + `Original error: ${e.message}`);
      }
    } while (true);

    try {
      return await behavior();
    } finally {
      await unlock(lockFile);
    }
  };

  guard.check = async () => await check(lockFile);

  return guard;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,