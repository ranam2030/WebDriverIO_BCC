"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeoutMixin = TimeoutMixin;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

var _protocol = require("../../protocol");

const MIN_TIMEOUT = 0;

function TimeoutMixin(Base) {
  class TimeoutCommands extends Base {
    async timeouts(type, ms, script, pageLoad, implicit) {
      if (_support.util.hasValue(type) && _support.util.hasValue(ms)) {
        this.log.debug(`MJSONWP timeout arguments: ${JSON.stringify({
          type,
          ms
        })}}`);

        switch (type) {
          case 'command':
            await this.newCommandTimeout(ms);
            return;

          case 'implicit':
            await this.implicitWaitMJSONWP(ms);
            return;

          case 'page load':
            await this.pageLoadTimeoutMJSONWP(ms);
            return;

          case 'script':
            await this.scriptTimeoutMJSONWP(ms);
            return;

          default:
            throw new Error(`'${type}' type is not supported for MJSONWP timeout`);
        }
      }

      this.log.debug(`W3C timeout argument: ${JSON.stringify({
        script,
        pageLoad,
        implicit
      })}}`);

      if (_support.util.hasValue(script)) {
        await this.scriptTimeoutW3C(script);
      }

      if (_support.util.hasValue(pageLoad)) {
        await this.pageLoadTimeoutW3C(pageLoad);
      }

      if (_support.util.hasValue(implicit)) {
        await this.implicitWaitW3C(implicit);
      }
    }

    async getTimeouts() {
      return {
        command: this.newCommandTimeoutMs,
        implicit: this.implicitWaitMs
      };
    }

    async implicitWaitW3C(ms) {
      await this.implicitWait(ms);
    }

    async implicitWaitMJSONWP(ms) {
      await this.implicitWait(ms);
    }

    async implicitWait(ms) {
      await this.setImplicitWait(this.parseTimeoutArgument(ms));
    }

    async pageLoadTimeoutW3C(ms) {
      throw new _protocol.errors.NotImplementedError('Not implemented yet for pageLoad.');
    }

    async pageLoadTimeoutMJSONWP(ms) {
      throw new _protocol.errors.NotImplementedError('Not implemented yet for pageLoad.');
    }

    async scriptTimeoutW3C(ms) {
      throw new _protocol.errors.NotImplementedError('Not implemented yet for script.');
    }

    async scriptTimeoutMJSONWP(ms) {
      throw new _protocol.errors.NotImplementedError('Not implemented yet for script.');
    }

    async newCommandTimeout(ms) {
      this.setNewCommandTimeout(this.parseTimeoutArgument(ms));
    }

    setImplicitWait(ms) {
      this.implicitWaitMs = ms;
      this.log.debug(`Set implicit wait to ${ms}ms`);

      if (this.managedDrivers && this.managedDrivers.length) {
        this.log.debug('Setting implicit wait on managed drivers');

        for (let driver of this.managedDrivers) {
          if (_lodash.default.isFunction(driver.setImplicitWait)) {
            driver.setImplicitWait(ms);
          }
        }
      }
    }

    setNewCommandTimeout(ms) {
      this.newCommandTimeoutMs = ms;
      this.log.debug(`Set new command timeout to ${ms}ms`);

      if (this.managedDrivers && this.managedDrivers.length) {
        this.log.debug('Setting new command timeout on managed drivers');

        for (let driver of this.managedDrivers) {
          if (_lodash.default.isFunction(driver.setNewCommandTimeout)) {
            driver.setNewCommandTimeout(ms);
          }
        }
      }
    }

    async implicitWaitForCondition(condFn) {
      this.log.debug(`Waiting up to ${this.implicitWaitMs} ms for condition`);

      let wrappedCondFn = async (...args) => {
        await this.clearNewCommandTimeout();
        return await condFn(...args);
      };

      return await (0, _asyncbox.waitForCondition)(wrappedCondFn, {
        waitMs: this.implicitWaitMs,
        intervalMs: 500,
        logger: this.log
      });
    }

    parseTimeoutArgument(ms) {
      let duration = parseInt(ms, 10);

      if (_lodash.default.isNaN(duration) || duration < MIN_TIMEOUT) {
        throw new _protocol.errors.UnknownError(`Invalid timeout value '${ms}'`);
      }

      return duration;
    }

  }

  return TimeoutCommands;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,