"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.desiredCapabilityConstraints = void 0;
Object.defineProperty(exports, "validator", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _validate = _interopRequireDefault(require("validate.js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

let desiredCapabilityConstraints = {
  platformName: {
    presence: true,
    isString: true
  },
  deviceName: {
    isString: true
  },
  platformVersion: {
    isString: true
  },
  newCommandTimeout: {
    isNumber: true
  },
  automationName: {
    isString: true
  },
  autoLaunch: {
    isBoolean: true
  },
  udid: {
    isString: true
  },
  orientation: {
    inclusion: ['LANDSCAPE', 'PORTRAIT']
  },
  autoWebview: {
    isBoolean: true
  },
  noReset: {
    isBoolean: true
  },
  fullReset: {
    isBoolean: true
  },
  language: {
    isString: true
  },
  locale: {
    isString: true
  },
  eventTimings: {
    isBoolean: true
  },
  printPageSourceOnFindFailure: {
    isBoolean: true
  }
};
exports.desiredCapabilityConstraints = desiredCapabilityConstraints;

_validate.default.validators.isString = function isString(value) {
  if (typeof value === 'string') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type string';
};

_validate.default.validators.isNumber = function isNumber(value) {
  if (typeof value === 'number') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  if (typeof value === 'string' && !isNaN(value)) {
    _logger.default.warn('Number capability passed in as string. Functionality may be compromised.');

    return null;
  }

  return 'must be of type number';
};

_validate.default.validators.isBoolean = function isBoolean(value) {
  if (typeof value === 'boolean') {
    return null;
  }

  if (typeof value === 'string' && ['true', 'false', ''].includes(value)) {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type boolean';
};

_validate.default.validators.isObject = function isObject(value) {
  if (typeof value === 'object') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type object';
};

_validate.default.validators.isArray = function isArray(value) {
  if (Array.isArray(value)) {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type array';
};

_validate.default.validators.deprecated = function deprecated(value, options, key) {
  if (options) {
    _logger.default.warn(`${key} is a deprecated capability`);
  }

  return null;
};

_validate.default.validators.inclusionCaseInsensitive = function inclusionCaseInsensitive(value, options) {
  if (typeof value === 'undefined') {
    return null;
  } else if (typeof value !== 'string') {
    return 'unrecognised';
  }

  for (let option of options) {
    if (option.toLowerCase() === value.toLowerCase()) {
      return null;
    }
  }

  return `${value} not part of ${options.toString()}`;
};

_validate.default.promise = _bluebird.default;

_validate.default.prettify = function prettify(val) {
  return val;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,