"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BaseDriverCore = exports.BaseDriver = void 0;

require("source-map-support/register");

var _core = require("./core");

var _support = require("@appium/support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _capabilities = require("../helpers/capabilities");

var _protocol = require("../protocol");

var _capabilities2 = require("./capabilities");

var _commands = require("./commands");

var _helpers = _interopRequireDefault(require("./helpers"));

const EVENT_SESSION_INIT = 'newSessionRequested';
const EVENT_SESSION_START = 'newSessionStarted';
const EVENT_SESSION_QUIT_START = 'quitSessionRequested';
const EVENT_SESSION_QUIT_DONE = 'quitSessionFinished';
const ON_UNEXPECTED_SHUTDOWN_EVENT = 'onUnexpectedShutdown';

class BaseDriverCore extends _core.DriverCore {
  cliArgs;

  async executeCommand(cmd, ...args) {
    let startTime = Date.now();

    if (cmd === 'createSession') {
      this.protocol = (0, _protocol.determineProtocol)(args);
      this.logEvent(EVENT_SESSION_INIT);
    } else if (cmd === _protocol.DELETE_SESSION_COMMAND) {
      this.logEvent(EVENT_SESSION_QUIT_START);
    }

    await this.clearNewCommandTimeout();

    if (this.shutdownUnexpectedly) {
      throw new _protocol.errors.NoSuchDriverError('The driver was unexpectedly shut down!');
    }

    if (!this[cmd]) {
      throw new _protocol.errors.NotYetImplementedError();
    }

    let unexpectedShutdownListener;

    const commandExecutor = async () => await _bluebird.default.race([this[cmd](...args), new _bluebird.default((resolve, reject) => {
      unexpectedShutdownListener = reject;
      this.eventEmitter.on(ON_UNEXPECTED_SHUTDOWN_EVENT, unexpectedShutdownListener);
    })]).finally(() => {
      if (unexpectedShutdownListener) {
        this.eventEmitter.removeListener(ON_UNEXPECTED_SHUTDOWN_EVENT, unexpectedShutdownListener);
        unexpectedShutdownListener = null;
      }
    });

    const res = this.isCommandsQueueEnabled ? await this.commandsQueueGuard.acquire(BaseDriver.name, commandExecutor) : await commandExecutor();

    if (this.isCommandsQueueEnabled && cmd !== _protocol.DELETE_SESSION_COMMAND) {
      await this.startNewCommandTimeout();
    }

    const endTime = Date.now();

    this._eventHistory.commands.push({
      cmd,
      startTime,
      endTime
    });

    if (cmd === 'createSession') {
      this.logEvent(EVENT_SESSION_START);
    } else if (cmd === _protocol.DELETE_SESSION_COMMAND) {
      this.logEvent(EVENT_SESSION_QUIT_DONE);
    }

    return res;
  }

  async startUnexpectedShutdown(err = new _protocol.errors.NoSuchDriverError('The driver was unexpectedly shut down!')) {
    this.eventEmitter.emit(ON_UNEXPECTED_SHUTDOWN_EVENT, err);
    this.shutdownUnexpectedly = true;

    try {
      if (this.sessionId !== null) {
        await this.deleteSession(this.sessionId);
      }
    } finally {
      this.shutdownUnexpectedly = false;
    }
  }

  async startNewCommandTimeout() {
    await this.clearNewCommandTimeout();
    if (!this.newCommandTimeoutMs) return;
    this.noCommandTimer = setTimeout(async () => {
      this.log.warn(`Shutting down because we waited ` + `${this.newCommandTimeoutMs / 1000.0} seconds for a command`);
      const errorMessage = `New Command Timeout of ` + `${this.newCommandTimeoutMs / 1000.0} seconds ` + `expired. Try customizing the timeout using the ` + `'newCommandTimeout' desired capability`;
      await this.startUnexpectedShutdown(new Error(errorMessage));
    }, this.newCommandTimeoutMs);
  }

  assignServer(server, host, port, path) {
    this.server = server;
    this.serverHost = host;
    this.serverPort = port;
    this.serverPath = path;
  }

  async reset() {
    this.log.debug('Resetting app mid-session');
    this.log.debug('Running generic full reset');
    let currentConfig = {};

    for (let property of ['implicitWaitMs', 'newCommandTimeoutMs', 'sessionId', 'resetOnUnexpectedShutdown']) {
      currentConfig[property] = this[property];
    }

    this.resetOnUnexpectedShutdown = () => {};

    try {
      if (this.sessionId !== null) {
        await this.deleteSession(this.sessionId);
      }

      this.log.debug('Restarting app');
      await this.createSession(this.originalCaps);
    } finally {
      for (let [key, value] of _lodash.default.toPairs(currentConfig)) {
        this[key] = value;
      }
    }

    await this.clearNewCommandTimeout();
  }

  async createSession(w3cCapabilities1, w3cCapabilities2, w3cCapabilities, driverData) {
    if (this.sessionId !== null) {
      throw new _protocol.errors.SessionNotCreatedError('Cannot create a new session while one is in progress');
    }

    this.log.debug();

    const originalCaps = _lodash.default.cloneDeep([w3cCapabilities, w3cCapabilities1, w3cCapabilities2].find(_capabilities.isW3cCaps));

    if (!originalCaps) {
      throw new _protocol.errors.SessionNotCreatedError('Appium only supports W3C-style capability objects. ' + 'Your client is sending an older capabilities format. Please update your client library.');
    }

    this.setProtocolW3C();
    this.originalCaps = _lodash.default.cloneDeep(originalCaps);
    this.log.debug(`Creating session with W3C capabilities: ${JSON.stringify(originalCaps, null, 2)}`);
    let caps;

    try {
      caps = (0, _capabilities2.processCapabilities)(originalCaps, this.desiredCapConstraints, this.shouldValidateCaps);

      if (caps[_capabilities2.APPIUM_OPTS_CAP]) {
        this.log.debug(`Found ${_capabilities2.PREFIXED_APPIUM_OPTS_CAP} capability present; will promote items inside to caps`);
        caps = (0, _capabilities2.promoteAppiumOptions)(caps);
      }

      caps = (0, _capabilities.fixCaps)(caps, this.desiredCapConstraints, this.log);
    } catch (e) {
      throw new _protocol.errors.SessionNotCreatedError(e.message);
    }

    this.validateDesiredCaps(caps);
    this.sessionId = _support.util.uuidV4();
    this.caps = caps;
    this.opts = _lodash.default.cloneDeep(this.initialOpts);
    Object.assign(this.opts, this.caps);

    if (this.opts.noReset && this.opts.fullReset) {
      throw new Error("The 'noReset' and 'fullReset' capabilities are mutually " + 'exclusive and should not both be set to true. You ' + "probably meant to just use 'fullReset' on its own");
    }

    if (this.opts.noReset === true) {
      this.opts.fullReset = false;
    }

    if (this.opts.fullReset === true) {
      this.opts.noReset = false;
    }

    this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
    this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;

    if (typeof this.opts.app === 'string' && this.opts.app.trim() === '') {
      delete this.opts.app;
    }

    if (!_lodash.default.isUndefined(this.caps.newCommandTimeout)) {
      this.newCommandTimeoutMs = this.caps.newCommandTimeout * 1000;
    }

    this._log.prefix = _helpers.default.generateDriverLogPrefix(this, this.sessionId);
    this.log.info(`Session created with session id: ${this.sessionId}`);
    return [this.sessionId, caps];
  }

  async deleteSession(sessionId, driverData) {
    await this.clearNewCommandTimeout();

    if (this.isCommandsQueueEnabled && this.commandsQueueGuard.isBusy()) {
      for (const key of _lodash.default.keys(this.commandsQueueGuard.queues)) {
        this.commandsQueueGuard.queues[key] = [];
      }
    }

    this.sessionId = null;
    this._log.prefix = _helpers.default.generateDriverLogPrefix(this);
  }

}

exports.BaseDriverCore = BaseDriverCore;

class BaseDriver extends (0, _commands.createBaseDriverClass)(BaseDriverCore) {}

exports.BaseDriver = BaseDriver;
var _default = BaseDriver;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,