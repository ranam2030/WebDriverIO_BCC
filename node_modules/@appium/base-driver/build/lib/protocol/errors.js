"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XPathLookupError = exports.UnsupportedOperationError = exports.UnknownMethodError = exports.UnknownError = exports.UnknownCommandError = exports.UnexpectedAlertOpenError = exports.UnableToSetCookieError = exports.UnableToCaptureScreen = exports.TimeoutError = exports.StaleElementReferenceError = exports.SessionNotCreatedError = exports.ScriptTimeoutError = exports.ProxyRequestError = exports.ProtocolError = exports.NotYetImplementedError = exports.NotImplementedError = exports.NoSuchWindowError = exports.NoSuchFrameError = exports.NoSuchElementError = exports.NoSuchDriverError = exports.NoSuchCookieError = exports.NoSuchContextError = exports.NoSuchAlertError = exports.NoAlertOpenError = exports.MoveTargetOutOfBoundsError = exports.JavaScriptError = exports.InvalidSelectorError = exports.InvalidElementStateError = exports.InvalidElementCoordinatesError = exports.InvalidCoordinatesError = exports.InvalidCookieDomainError = exports.InvalidContextError = exports.InvalidArgumentError = exports.InsecureCertificateError = exports.IMENotAvailableError = exports.IMEEngineActivationFailedError = exports.ElementNotVisibleError = exports.ElementNotInteractableError = exports.ElementIsNotSelectableError = exports.ElementClickInterceptedError = exports.BadParametersError = void 0;
exports.errorFromMJSONWPStatusCode = errorFromMJSONWPStatusCode;
exports.errorFromW3CJsonCode = errorFromW3CJsonCode;
exports.errors = void 0;
exports.getResponseForJsonwpError = getResponseForJsonwpError;
exports.getResponseForW3CError = getResponseForW3CError;
exports.isErrorType = isErrorType;
exports.isUnknownError = isUnknownError;

require("source-map-support/register");

var _es6Error = _interopRequireDefault(require("es6-error"));

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

var _httpStatusCodes = require("http-status-codes");

const mjsonwpLog = _support.logger.getLogger('MJSONWP');

const w3cLog = _support.logger.getLogger('W3C');

const W3C_UNKNOWN_ERROR = 'unknown error';

class ProtocolError extends _es6Error.default {
  constructor(msg, jsonwpCode, w3cStatus, error) {
    super(msg);
    this.jsonwpCode = jsonwpCode;
    this.error = error || W3C_UNKNOWN_ERROR;

    if (this.jsonwpCode === null) {
      this.jsonwpCode = 13;
    }

    this.w3cStatus = w3cStatus || _httpStatusCodes.StatusCodes.BAD_REQUEST;
    this._stacktrace = null;
  }

  get stacktrace() {
    return this._stacktrace || this.stack;
  }

  set stacktrace(value) {
    this._stacktrace = value;
  }

}

exports.ProtocolError = ProtocolError;

class NoSuchDriverError extends ProtocolError {
  static code() {
    return 6;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.NOT_FOUND;
  }

  static error() {
    return 'invalid session id';
  }

  constructor(err) {
    super(err || 'A session is either terminated or not started', NoSuchDriverError.code(), NoSuchDriverError.w3cStatus(), NoSuchDriverError.error());
  }

}

exports.NoSuchDriverError = NoSuchDriverError;

class NoSuchElementError extends ProtocolError {
  static code() {
    return 7;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.NOT_FOUND;
  }

  static error() {
    return 'no such element';
  }

  constructor(err) {
    super(err || 'An element could not be located on the page using the given ' + 'search parameters.', NoSuchElementError.code(), NoSuchElementError.w3cStatus(), NoSuchElementError.error());
  }

}

exports.NoSuchElementError = NoSuchElementError;

class NoSuchFrameError extends ProtocolError {
  static code() {
    return 8;
  }

  static error() {
    return 'no such frame';
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.NOT_FOUND;
  }

  constructor(err) {
    super(err || 'A request to switch to a frame could not be satisfied because ' + 'the frame could not be found.', NoSuchFrameError.code(), NoSuchFrameError.w3cStatus(), NoSuchFrameError.error());
  }

}

exports.NoSuchFrameError = NoSuchFrameError;

class UnknownCommandError extends ProtocolError {
  static code() {
    return 9;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.NOT_FOUND;
  }

  static error() {
    return 'unknown command';
  }

  constructor(err) {
    super(err || 'The requested resource could not be found, or a request was ' + 'received using an HTTP method that is not supported by the mapped ' + 'resource.', UnknownCommandError.code(), UnknownCommandError.w3cStatus(), UnknownCommandError.error());
  }

}

exports.UnknownCommandError = UnknownCommandError;

class StaleElementReferenceError extends ProtocolError {
  static code() {
    return 10;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.NOT_FOUND;
  }

  static error() {
    return 'stale element reference';
  }

  constructor(err) {
    super(err || 'An element command failed because the referenced element is no ' + 'longer attached to the DOM.', StaleElementReferenceError.code(), StaleElementReferenceError.w3cStatus(), StaleElementReferenceError.error());
  }

}

exports.StaleElementReferenceError = StaleElementReferenceError;

class ElementNotVisibleError extends ProtocolError {
  static code() {
    return 11;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  static error() {
    return 'element not visible';
  }

  constructor(err) {
    super(err || 'An element command could not be completed because the element is ' + 'not visible on the page.', ElementNotVisibleError.code(), ElementNotVisibleError.w3cStatus(), ElementNotVisibleError.error());
  }

}

exports.ElementNotVisibleError = ElementNotVisibleError;

class InvalidElementStateError extends ProtocolError {
  static code() {
    return 12;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  static error() {
    return 'invalid element state';
  }

  constructor(err) {
    super(err || 'An element command could not be completed because the element is ' + 'in an invalid state (e.g. attempting to click a disabled element).', InvalidElementStateError.code(), InvalidElementStateError.w3cStatus(), InvalidElementStateError.error());
  }

}

exports.InvalidElementStateError = InvalidElementStateError;

class UnknownError extends ProtocolError {
  static code() {
    return 13;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return W3C_UNKNOWN_ERROR;
  }

  constructor(errorOrMessage) {
    const origMessage = _lodash.default.isString((errorOrMessage || {}).message) ? errorOrMessage.message : errorOrMessage;
    const message = 'An unknown server-side error occurred while processing the command.' + (origMessage ? ` Original error: ${origMessage}` : '');
    super(message, UnknownError.code(), UnknownError.w3cStatus(), UnknownError.error());
  }

}

exports.UnknownError = UnknownError;

class UnknownMethodError extends ProtocolError {
  static code() {
    return 405;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.METHOD_NOT_ALLOWED;
  }

  static error() {
    return 'unknown method';
  }

  constructor(err) {
    super(err || 'The requested command matched a known URL but did not match an method for that URL', UnknownMethodError.code(), UnknownMethodError.w3cStatus(), UnknownMethodError.error());
  }

}

exports.UnknownMethodError = UnknownMethodError;

class UnsupportedOperationError extends ProtocolError {
  static code() {
    return 405;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return 'unsupported operation';
  }

  constructor(err) {
    super(err || 'A server-side error occurred. Command cannot be supported.', UnsupportedOperationError.code(), UnsupportedOperationError.w3cStatus(), UnsupportedOperationError.error());
  }

}

exports.UnsupportedOperationError = UnsupportedOperationError;

class ElementIsNotSelectableError extends ProtocolError {
  static code() {
    return 15;
  }

  static error() {
    return 'element not selectable';
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  constructor(err) {
    super(err || 'An attempt was made to select an element that cannot be selected.', ElementIsNotSelectableError.code(), ElementIsNotSelectableError.w3cStatus(), ElementIsNotSelectableError.error());
  }

}

exports.ElementIsNotSelectableError = ElementIsNotSelectableError;

class ElementClickInterceptedError extends ProtocolError {
  static code() {
    return 64;
  }

  static error() {
    return 'element click intercepted';
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  constructor(err) {
    super(err || 'The Element Click command could not be completed because the element receiving ' + 'the events is obscuring the element that was requested clicked', ElementClickInterceptedError.code(), ElementClickInterceptedError.w3cStatus(), ElementClickInterceptedError.error());
  }

}

exports.ElementClickInterceptedError = ElementClickInterceptedError;

class ElementNotInteractableError extends ProtocolError {
  static code() {
    return 60;
  }

  static error() {
    return 'element not interactable';
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  constructor(err) {
    super(err || 'A command could not be completed because the element is not pointer- or keyboard interactable', ElementNotInteractableError.code(), ElementNotInteractableError.w3cStatus(), ElementNotInteractableError.error());
  }

}

exports.ElementNotInteractableError = ElementNotInteractableError;

class InsecureCertificateError extends ProtocolError {
  static error() {
    return 'insecure certificate';
  }

  constructor(err) {
    super(err || 'Navigation caused the user agent to hit a certificate warning, which is usually the result of an expired or invalid TLS certificate', ElementIsNotSelectableError.code(), null, InsecureCertificateError.error());
  }

}

exports.InsecureCertificateError = InsecureCertificateError;

class JavaScriptError extends ProtocolError {
  static code() {
    return 17;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return 'javascript error';
  }

  constructor(err) {
    super(err || 'An error occurred while executing user supplied JavaScript.', JavaScriptError.code(), JavaScriptError.w3cStatus(), JavaScriptError.error());
  }

}

exports.JavaScriptError = JavaScriptError;

class XPathLookupError extends ProtocolError {
  static code() {
    return 19;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  static error() {
    return 'invalid selector';
  }

  constructor(err) {
    super(err || 'An error occurred while searching for an element by XPath.', XPathLookupError.code(), XPathLookupError.w3cStatus(), XPathLookupError.error());
  }

}

exports.XPathLookupError = XPathLookupError;

class TimeoutError extends ProtocolError {
  static code() {
    return 21;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.REQUEST_TIMEOUT;
  }

  static error() {
    return 'timeout';
  }

  constructor(err) {
    super(err || 'An operation did not complete before its timeout expired.', TimeoutError.code(), TimeoutError.w3cStatus(), TimeoutError.error());
  }

}

exports.TimeoutError = TimeoutError;

class NoSuchWindowError extends ProtocolError {
  static code() {
    return 23;
  }

  static error() {
    return 'no such window';
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.NOT_FOUND;
  }

  constructor(err) {
    super(err || 'A request to switch to a different window could not be satisfied ' + 'because the window could not be found.', NoSuchWindowError.code(), NoSuchWindowError.w3cStatus(), NoSuchWindowError.error());
  }

}

exports.NoSuchWindowError = NoSuchWindowError;

class InvalidArgumentError extends ProtocolError {
  static code() {
    return 61;
  }

  static error() {
    return 'invalid argument';
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  constructor(err) {
    super(err || 'The arguments passed to the command are either invalid or malformed', InvalidArgumentError.code(), InvalidArgumentError.w3cStatus(), InvalidArgumentError.error());
  }

}

exports.InvalidArgumentError = InvalidArgumentError;

class InvalidCookieDomainError extends ProtocolError {
  static code() {
    return 24;
  }

  static error() {
    return 'invalid cookie domain';
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  constructor(err) {
    super(err || 'An illegal attempt was made to set a cookie under a different ' + 'domain than the current page.', InvalidCookieDomainError.code(), InvalidCookieDomainError.w3cStatus(), InvalidCookieDomainError.error());
  }

}

exports.InvalidCookieDomainError = InvalidCookieDomainError;

class NoSuchCookieError extends ProtocolError {
  static code() {
    return 62;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.NOT_FOUND;
  }

  static error() {
    return 'no such cookie';
  }

  constructor(err) {
    super(err || 'No cookie matching the given path name was found amongst the associated cookies of the current browsing context’s active document', NoSuchCookieError.code(), NoSuchCookieError.w3cStatus(), NoSuchCookieError.error());
  }

}

exports.NoSuchCookieError = NoSuchCookieError;

class UnableToSetCookieError extends ProtocolError {
  static code() {
    return 25;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return 'unable to set cookie';
  }

  constructor(err) {
    super(err || 'A request to set a cookie\'s value could not be satisfied.', UnableToSetCookieError.code(), UnableToSetCookieError.w3cStatus(), UnableToSetCookieError.error());
  }

}

exports.UnableToSetCookieError = UnableToSetCookieError;

class UnexpectedAlertOpenError extends ProtocolError {
  static code() {
    return 26;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return 'unexpected alert open';
  }

  constructor(err) {
    super(err || 'A modal dialog was open, blocking this operation', UnexpectedAlertOpenError.code(), UnexpectedAlertOpenError.w3cStatus(), UnexpectedAlertOpenError.error());
  }

}

exports.UnexpectedAlertOpenError = UnexpectedAlertOpenError;

class NoAlertOpenError extends ProtocolError {
  static code() {
    return 27;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.NOT_FOUND;
  }

  static error() {
    return 'no such alert';
  }

  constructor(err) {
    super(err || 'An attempt was made to operate on a modal dialog when one ' + 'was not open.', NoAlertOpenError.code(), NoAlertOpenError.w3cStatus(), NoAlertOpenError.error());
  }

}

exports.NoAlertOpenError = NoAlertOpenError;

class NoSuchAlertError extends NoAlertOpenError {}

exports.NoSuchAlertError = NoSuchAlertError;

class ScriptTimeoutError extends ProtocolError {
  static code() {
    return 28;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.REQUEST_TIMEOUT;
  }

  static error() {
    return 'script timeout';
  }

  constructor(err) {
    super(err || 'A script did not complete before its timeout expired.', ScriptTimeoutError.code(), ScriptTimeoutError.w3cStatus(), ScriptTimeoutError.error());
  }

}

exports.ScriptTimeoutError = ScriptTimeoutError;

class InvalidElementCoordinatesError extends ProtocolError {
  static code() {
    return 29;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  static error() {
    return 'invalid coordinates';
  }

  constructor(err) {
    super(err || 'The coordinates provided to an interactions operation are invalid.', InvalidElementCoordinatesError.code(), InvalidElementCoordinatesError.w3cStatus(), InvalidElementCoordinatesError.error());
  }

}

exports.InvalidElementCoordinatesError = InvalidElementCoordinatesError;

class InvalidCoordinatesError extends InvalidElementCoordinatesError {}

exports.InvalidCoordinatesError = InvalidCoordinatesError;

class IMENotAvailableError extends ProtocolError {
  static code() {
    return 30;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return 'unsupported operation';
  }

  constructor(err) {
    super(err || 'IME was not available.', IMENotAvailableError.code(), IMENotAvailableError.w3cStatus(), IMENotAvailableError.error());
  }

}

exports.IMENotAvailableError = IMENotAvailableError;

class IMEEngineActivationFailedError extends ProtocolError {
  static code() {
    return 31;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return 'unsupported operation';
  }

  constructor(err) {
    super(err || 'An IME engine could not be started.', IMEEngineActivationFailedError.code(), IMEEngineActivationFailedError.w3cStatus(), IMEEngineActivationFailedError.error());
  }

}

exports.IMEEngineActivationFailedError = IMEEngineActivationFailedError;

class InvalidSelectorError extends ProtocolError {
  static code() {
    return 32;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

  static error() {
    return 'invalid selector';
  }

  constructor(err) {
    super(err || 'Argument was an invalid selector (e.g. XPath/CSS).', InvalidSelectorError.code(), InvalidSelectorError.w3cStatus(), InvalidSelectorError.error());
  }

}

exports.InvalidSelectorError = InvalidSelectorError;

class SessionNotCreatedError extends ProtocolError {
  static code() {
    return 33;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return 'session not created';
  }

  constructor(details) {
    let message = 'A new session could not be created.';

    if (details) {
      message += ` Details: ${details}`;
    }

    super(message, SessionNotCreatedError.code(), SessionNotCreatedError.w3cStatus(), SessionNotCreatedError.error());
  }

}

exports.SessionNotCreatedError = SessionNotCreatedError;

class MoveTargetOutOfBoundsError extends ProtocolError {
  static code() {
    return 34;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return 'move target out of bounds';
  }

  constructor(err) {
    super(err || 'Target provided for a move action is out of bounds.', MoveTargetOutOfBoundsError.code(), MoveTargetOutOfBoundsError.w3cStatus(), MoveTargetOutOfBoundsError.error());
  }

}

exports.MoveTargetOutOfBoundsError = MoveTargetOutOfBoundsError;

class NoSuchContextError extends ProtocolError {
  static code() {
    return 35;
  }

  constructor(err) {
    super(err || 'No such context found.', NoSuchContextError.code());
  }

}

exports.NoSuchContextError = NoSuchContextError;

class InvalidContextError extends ProtocolError {
  static code() {
    return 36;
  }

  constructor(err) {
    super(err || 'That command could not be executed in the current context.', InvalidContextError.code());
  }

}

exports.InvalidContextError = InvalidContextError;

class NotYetImplementedError extends UnknownMethodError {
  constructor(err) {
    super(err || 'Method has not yet been implemented');
  }

}

exports.NotYetImplementedError = NotYetImplementedError;

class NotImplementedError extends UnknownMethodError {
  constructor(err) {
    super(err || 'Method is not implemented');
  }

}

exports.NotImplementedError = NotImplementedError;

class UnableToCaptureScreen extends ProtocolError {
  static code() {
    return 63;
  }

  static w3cStatus() {
    return _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  }

  static error() {
    return 'unable to capture screen';
  }

  constructor(err) {
    super(err || 'A screen capture was made impossible', UnableToCaptureScreen.code(), UnableToCaptureScreen.w3cStatus(), UnableToCaptureScreen.error());
  }

}

exports.UnableToCaptureScreen = UnableToCaptureScreen;

class BadParametersError extends _es6Error.default {
  static error() {
    return 'invalid argument';
  }

  constructor(requiredParams, actualParams, errMessage) {
    let message;

    if (!errMessage) {
      message = `Parameters were incorrect. We wanted ` + `${JSON.stringify(requiredParams)} and you ` + `sent ${JSON.stringify(actualParams)}`;
    } else {
      message = `Parameters were incorrect. You sent ${JSON.stringify(actualParams)}, ${errMessage}`;
    }

    super(message);
    this.w3cStatus = _httpStatusCodes.StatusCodes.BAD_REQUEST;
  }

}

exports.BadParametersError = BadParametersError;

class ProxyRequestError extends _es6Error.default {
  constructor(err, responseError, httpStatus) {
    let responseErrorObj = _support.util.safeJsonParse(responseError);

    if (!_lodash.default.isPlainObject(responseErrorObj)) {
      responseErrorObj = {};
    }

    let origMessage = _lodash.default.isString(responseError) ? responseError : '';

    if (!_lodash.default.isEmpty(responseErrorObj)) {
      if (_lodash.default.isString(responseErrorObj.value)) {
        origMessage = responseErrorObj.value;
      } else if (_lodash.default.isPlainObject(responseErrorObj.value) && _lodash.default.isString(responseErrorObj.value.message)) {
        origMessage = responseErrorObj.value.message;
      }
    }

    super(_lodash.default.isEmpty(err) ? `Proxy request unsuccessful. ${origMessage}` : err);
    this.w3cStatus = _httpStatusCodes.StatusCodes.BAD_REQUEST;

    if (_lodash.default.isPlainObject(responseErrorObj.value) && _lodash.default.has(responseErrorObj.value, 'error')) {
      this.w3c = responseErrorObj.value;
      this.w3cStatus = httpStatus || _httpStatusCodes.StatusCodes.BAD_REQUEST;
    } else {
      this.jsonwp = responseErrorObj;
    }
  }

  getActualError() {
    var _this$jsonwp, _this$jsonwp2;

    if (_support.util.hasValue((_this$jsonwp = this.jsonwp) === null || _this$jsonwp === void 0 ? void 0 : _this$jsonwp.status) && _support.util.hasValue((_this$jsonwp2 = this.jsonwp) === null || _this$jsonwp2 === void 0 ? void 0 : _this$jsonwp2.value)) {
      return errorFromMJSONWPStatusCode(this.jsonwp.status, this.jsonwp.value);
    } else if (_support.util.hasValue(this.w3c) && _lodash.default.isNumber(this.w3cStatus) && this.w3cStatus >= 300) {
      return errorFromW3CJsonCode(this.w3c.error, this.w3c.message || this.message, this.w3c.stacktrace);
    }

    return new UnknownError(this.message);
  }

}

exports.ProxyRequestError = ProxyRequestError;
const errors = {
  NotYetImplementedError,
  NotImplementedError,
  BadParametersError,
  InvalidArgumentError,
  NoSuchDriverError,
  NoSuchElementError,
  UnknownCommandError,
  StaleElementReferenceError,
  ElementNotVisibleError,
  InvalidElementStateError,
  UnknownError,
  ElementIsNotSelectableError,
  ElementClickInterceptedError,
  ElementNotInteractableError,
  InsecureCertificateError,
  JavaScriptError,
  XPathLookupError,
  TimeoutError,
  NoSuchWindowError,
  NoSuchCookieError,
  InvalidCookieDomainError,
  InvalidCoordinatesError,
  UnableToSetCookieError,
  UnexpectedAlertOpenError,
  NoAlertOpenError,
  ScriptTimeoutError,
  InvalidElementCoordinatesError,
  IMENotAvailableError,
  IMEEngineActivationFailedError,
  InvalidSelectorError,
  SessionNotCreatedError,
  MoveTargetOutOfBoundsError,
  NoSuchAlertError,
  NoSuchContextError,
  InvalidContextError,
  NoSuchFrameError,
  UnableToCaptureScreen,
  UnknownMethodError,
  UnsupportedOperationError,
  ProxyRequestError
};
exports.errors = errors;
const jsonwpErrorCodeMap = {};

for (let ErrorClass of _lodash.default.values(errors)) {
  if (ErrorClass.code) {
    jsonwpErrorCodeMap[ErrorClass.code()] = ErrorClass;
  }
}

const w3cErrorCodeMap = {};

for (let ErrorClass of _lodash.default.values(errors)) {
  if (ErrorClass.error) {
    w3cErrorCodeMap[ErrorClass.error()] = ErrorClass;
  }
}

function isUnknownError(err) {
  return !err.constructor.name || !_lodash.default.values(errors).find(function equalNames(error) {
    return error.name === err.constructor.name;
  });
}

function isErrorType(err, type) {
  if (type.name === ProtocolError.name) {
    return !!err.jsonwpCode;
  } else if (type.name === ProxyRequestError.name) {
    if (err.jsonwp) {
      return !!err.jsonwp.status;
    }

    if (_lodash.default.isPlainObject(err.w3c)) {
      return _lodash.default.isNumber(err.w3cStatus) && err.w3cStatus >= 300;
    }

    return false;
  }

  return err.constructor.name === type.name;
}

function errorFromMJSONWPStatusCode(code, value = '') {
  const message = (value || {}).message || value || '';

  if (code !== UnknownError.code() && jsonwpErrorCodeMap[code]) {
    mjsonwpLog.debug(`Matched JSONWP error code ${code} to ${jsonwpErrorCodeMap[code].name}`);
    return new jsonwpErrorCodeMap[code](message);
  }

  mjsonwpLog.debug(`Matched JSONWP error code ${code} to UnknownError`);
  return new UnknownError(message);
}

function errorFromW3CJsonCode(code, message, stacktrace = null) {
  if (code && w3cErrorCodeMap[code.toLowerCase()]) {
    w3cLog.debug(`Matched W3C error code '${code}' to ${w3cErrorCodeMap[code.toLowerCase()].name}`);
    const resultError = new w3cErrorCodeMap[code.toLowerCase()](message);
    resultError.stacktrace = stacktrace;
    return resultError;
  }

  w3cLog.debug(`Matched W3C error code '${code}' to UnknownError`);
  const resultError = new UnknownError(message);
  resultError.stacktrace = stacktrace;
  return resultError;
}

function getResponseForW3CError(err) {
  let httpStatus;
  let w3cErrorString;

  if (!err.w3cStatus) {
    err = _support.util.hasValue(err.status) ? errorFromMJSONWPStatusCode(err.status, err.value) : new errors.UnknownError(err.message);
  }

  if (isErrorType(err, errors.BadParametersError)) {
    w3cLog.debug(`Bad parameters: ${err}`);
    w3cErrorString = BadParametersError.error();
  } else {
    w3cErrorString = err.error;
  }

  httpStatus = err.w3cStatus;

  if (!w3cErrorString) {
    w3cErrorString = UnknownError.error();
  }

  let httpResBody = {
    value: {
      error: w3cErrorString,
      message: err.message,
      stacktrace: err.stacktrace || err.stack
    }
  };
  return [httpStatus, httpResBody];
}

function getResponseForJsonwpError(err) {
  if (isUnknownError(err)) {
    err = new errors.UnknownError(err);
  }

  let httpStatus = _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR;
  let httpResBody = {
    status: err.jsonwpCode,
    value: {
      message: err.message
    }
  };

  if (isErrorType(err, errors.BadParametersError)) {
    mjsonwpLog.debug(`Bad parameters: ${err}`);
    httpStatus = _httpStatusCodes.StatusCodes.BAD_REQUEST;
    httpResBody = err.message;
  } else if (isErrorType(err, errors.NotYetImplementedError) || isErrorType(err, errors.NotImplementedError)) {
    httpStatus = _httpStatusCodes.StatusCodes.NOT_IMPLEMENTED;
  } else if (isErrorType(err, errors.NoSuchDriverError)) {
    httpStatus = _httpStatusCodes.StatusCodes.NOT_FOUND;
  }

  return [httpStatus, httpResBody];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,