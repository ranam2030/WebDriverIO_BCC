"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _log = require("../../../../lib/basedriver/commands/log");

var _sinon = require("sinon");

var _lodash = _interopRequireDefault(require("lodash"));

const expect = chai.expect;
const FIRST_LOGS = ['first', 'logs'];
const SECOND_LOGS = ['second', 'logs'];
const SUPPORTED_LOG_TYPES = {
  one: {
    description: 'First logs',
    getter: () => _lodash.default.clone(FIRST_LOGS)
  },
  two: {
    description: 'Seconds logs',
    getter: () => _lodash.default.clone(SECOND_LOGS)
  }
};
describe('log commands -', function () {
  let sandbox;
  let LogCommands;
  let logCommands;
  beforeEach(function () {
    sandbox = (0, _sinon.createSandbox)();
    LogCommands = (0, _log.LogMixin)(class {
      get log() {
        return this._log;
      }

    });
    logCommands = new LogCommands();
    logCommands.supportedLogTypes = {};
    logCommands._log = {
      debug: _lodash.default.noop
    };
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('getLogTypes', function () {
    it('should return empty array when no supported log types', async function () {
      (await logCommands.getLogTypes()).should.eql([]);
    });
    it('should return keys to log type object', async function () {
      logCommands.supportedLogTypes = SUPPORTED_LOG_TYPES;
      (await logCommands.getLogTypes()).should.eql(['one', 'two']);
    });
  });
  describe('getLog', function () {
    let one;
    let two;
    beforeEach(function () {
      one = sandbox.spy(SUPPORTED_LOG_TYPES.one, 'getter');
      two = sandbox.spy(SUPPORTED_LOG_TYPES.two, 'getter');
    });
    it('should throw error if log type not supported', async function () {
      await logCommands.getLog('one').should.eventually.be.rejected;
      one.called.should.be.false;
      two.called.should.be.false;
    });
    it('should throw an error with available log types if log type not supported', async function () {
      logCommands.supportedLogTypes = SUPPORTED_LOG_TYPES;
      let err;

      try {
        await logCommands.getLog('three');
      } catch (_err) {
        err = _err;
      }

      expect(err).to.exist;
      err.message.should.eql(`Unsupported log type 'three'. Supported types: {"one":"First logs","two":"Seconds logs"}`);
      one.called.should.be.false;
      two.called.should.be.false;
    });
    it('should call getter on appropriate log when found', async function () {
      logCommands.supportedLogTypes = SUPPORTED_LOG_TYPES;
      let logs = await logCommands.getLog('one');
      logs.should.eql(FIRST_LOGS);
      one.called.should.be.true;
      two.called.should.be.false;
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,