"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lib = require("../../lib");

var _sinon = require("sinon");

function baseDriverUnitTests(DriverClass, defaultCaps = {}) {
  const className = DriverClass.name || '(unknown driver)';
  describe('static property', function () {
    describe('baseVersion', function () {
      it('should exist', function () {
        DriverClass.baseVersion.should.exist;
      });
    });
  });
  describe('Log prefix', function () {
    it('should setup log prefix', async function () {
      const d = new DriverClass();
      const previousPrefix = d.log.prefix;
      await d.createSession({
        alwaysMatch: Object.assign({}, defaultCaps, {
          platformName: 'Fake',
          'appium:deviceName': 'Commodore 64'
        }),
        firstMatch: [{}]
      });

      try {
        previousPrefix.should.not.eql(d.log.prefix);
      } finally {
        await d.deleteSession();
        previousPrefix.should.eql(d.log.prefix);
      }
    });
  });
  describe(`BaseDriver (as ${className})`, function () {
    let d, w3cCaps;
    let sandbox;
    beforeEach(function () {
      sandbox = (0, _sinon.createSandbox)();
      d = new DriverClass();
      w3cCaps = {
        alwaysMatch: Object.assign({}, defaultCaps, {
          platformName: 'Fake',
          'appium:deviceName': 'Commodore 64'
        }),
        firstMatch: [{}]
      };
    });
    afterEach(async function () {
      await d.deleteSession();
      sandbox.restore();
    });
    it('should report the version of BaseDriver used', function () {
      should.exist(DriverClass.baseVersion);
    });
    it('should return an empty status object', async function () {
      let status = await d.getStatus();
      status.should.eql({});
    });
    it('should return a sessionId from createSession', async function () {
      let [sessId] = await d.createSession(null, null, w3cCaps);
      should.exist(sessId);
      sessId.should.be.a('string');
      sessId.length.should.be.above(5);
    });
    it('should not be able to start two sessions without closing the first', async function () {
      await d.createSession(null, null, _lodash.default.cloneDeep(w3cCaps));
      await d.createSession(null, null, _lodash.default.cloneDeep(w3cCaps)).should.eventually.be.rejectedWith('session');
    });
    it('should be able to delete a session', async function () {
      let sessionId1 = await d.createSession(null, null, _lodash.default.cloneDeep(w3cCaps));
      await d.deleteSession();
      should.equal(d.sessionId, null);
      let sessionId2 = await d.createSession(null, null, _lodash.default.cloneDeep(w3cCaps));
      sessionId1.should.not.eql(sessionId2);
    });
    it('should get the current session', async function () {
      let [, caps] = await d.createSession(null, null, w3cCaps);
      caps.should.equal(await d.getSession());
    });
    it('should return sessions if no session exists', async function () {
      let sessions = await d.getSessions();
      sessions.length.should.equal(0);
    });
    it('should return sessions', async function () {
      const caps = _lodash.default.clone(w3cCaps);

      caps.a = 'cap';
      await d.createSession(null, null, caps);
      let sessions = await d.getSessions();
      sessions.length.should.equal(1);
      sessions[0].should.include({
        id: d.sessionId
      });
      sessions[0].capabilities.should.include({
        deviceName: 'Commodore 64',
        platformName: 'Fake'
      });
    });
    it('should fulfill an unexpected driver quit promise', async function () {
      d.getStatus = async function () {
        await _bluebird.default.delay(1000);
        return 'good status';
      }.bind(d);

      let cmdPromise = d.executeCommand('getStatus');
      await _bluebird.default.delay(10);
      const p = new _bluebird.default((resolve, reject) => {
        setTimeout(() => reject(new Error('onUnexpectedShutdown event is expected to be fired within 5 seconds timeout')), 5000);
        d.onUnexpectedShutdown(resolve);
      });
      d.startUnexpectedShutdown(new Error('We crashed'));
      await cmdPromise.should.be.rejectedWith(/We crashed/);
      await p;
    });
    it('should not allow commands in middle of unexpected shutdown', async function () {
      d.oldDeleteSession = d.deleteSession;

      d.deleteSession = async function () {
        await _bluebird.default.delay(100);
        await this.oldDeleteSession();
      }.bind(d);

      await d.createSession(null, null, w3cCaps);
      const p = new _bluebird.default((resolve, reject) => {
        setTimeout(() => reject(new Error('onUnexpectedShutdown event is expected to be fired within 5 seconds timeout')), 5000);
        d.onUnexpectedShutdown(resolve);
      });
      d.startUnexpectedShutdown(new Error('We crashed'));
      await p;
      await d.executeCommand('getSession').should.be.rejectedWith(/shut down/);
    });
    it('should allow new commands after done shutting down', async function () {
      d.oldDeleteSession = d.deleteSession;

      d.deleteSession = async function () {
        await _bluebird.default.delay(100);
        await this.oldDeleteSession();
      }.bind(d);

      await d.createSession(null, null, _lodash.default.cloneDeep(w3cCaps));
      const p = new _bluebird.default((resolve, reject) => {
        setTimeout(() => reject(new Error('onUnexpectedShutdown event is expected to be fired within 5 seconds timeout')), 5000);
        d.onUnexpectedShutdown(resolve);
      });
      d.startUnexpectedShutdown(new Error('We crashed'));
      await p;
      await d.executeCommand('getSession').should.be.rejectedWith(/shut down/);
      await _bluebird.default.delay(500);
      await d.executeCommand('createSession', null, null, _lodash.default.cloneDeep(w3cCaps));
      await d.deleteSession();
    });
    it('should distinguish between W3C and JSONWP session', async function () {
      await d.executeCommand('createSession', null, null, {
        alwaysMatch: Object.assign({}, defaultCaps, {
          platformName: 'Fake',
          'appium:deviceName': 'Commodore 64'
        }),
        firstMatch: [{}]
      });
      d.protocol.should.equal('W3C');
    });
    describe('protocol detection', function () {
      it('should use W3C if only W3C caps are provided', async function () {
        await d.createSession(null, null, {
          alwaysMatch: _lodash.default.clone(defaultCaps),
          firstMatch: [{}]
        });
        d.protocol.should.equal('W3C');
      });
    });
    it('should have a method to get driver for a session', async function () {
      let [sessId] = await d.createSession(null, null, w3cCaps);
      d.driverForSession(sessId).should.eql(d);
    });
    describe('command queue', function () {
      let d = new DriverClass();
      let waitMs = 10;

      d.getStatus = async function () {
        await _bluebird.default.delay(waitMs);
        return Date.now();
      }.bind(d);

      d.getSessions = async function () {
        await _bluebird.default.delay(waitMs);
        throw new Error('multipass');
      }.bind(d);

      afterEach(async function () {
        await d.clearNewCommandTimeout();
      });
      it('should queue commands and.executeCommand/respond in the order received', async function () {
        let numCmds = 10;
        let cmds = [];

        for (let i = 0; i < numCmds; i++) {
          cmds.push(d.executeCommand('getStatus'));
        }

        let results = await _bluebird.default.all(cmds);

        for (let i = 1; i < numCmds; i++) {
          if (results[i] <= results[i - 1]) {
            throw new Error('Got result out of order');
          }
        }
      });
      it('should handle errors correctly when queuing', async function () {
        let numCmds = 10;
        let cmds = [];

        for (let i = 0; i < numCmds; i++) {
          if (i === 5) {
            cmds.push(d.executeCommand('getSessions'));
          } else {
            cmds.push(d.executeCommand('getStatus'));
          }
        }

        let results = await _bluebird.default.settle(cmds);

        for (let i = 1; i < 5; i++) {
          if (results[i].value() <= results[i - 1].value()) {
            throw new Error('Got result out of order');
          }
        }

        results[5].reason().message.should.contain('multipass');

        for (let i = 7; i < numCmds; i++) {
          if (results[i].value() <= results[i - 1].value()) {
            throw new Error('Got result out of order');
          }
        }
      });
      it('should not care if queue empties for a bit', async function () {
        let numCmds = 10;
        let cmds = [];

        for (let i = 0; i < numCmds; i++) {
          cmds.push(d.executeCommand('getStatus'));
        }

        let results = await _bluebird.default.all(cmds);
        cmds = [];

        for (let i = 0; i < numCmds; i++) {
          cmds.push(d.executeCommand('getStatus'));
        }

        results = await _bluebird.default.all(cmds);

        for (let i = 1; i < numCmds; i++) {
          if (results[i] <= results[i - 1]) {
            throw new Error('Got result out of order');
          }
        }
      });
    });
    describe('timeouts', function () {
      before(async function () {
        await d.createSession(null, null, w3cCaps);
      });
      describe('command', function () {
        it('should exist by default', function () {
          d.newCommandTimeoutMs.should.equal(60000);
        });
        it('should be settable through `timeouts`', async function () {
          await d.timeouts('command', 20);
          d.newCommandTimeoutMs.should.equal(20);
        });
      });
      describe('implicit', function () {
        it('should not exist by default', function () {
          d.implicitWaitMs.should.equal(0);
        });
        it('should be settable through `timeouts`', async function () {
          await d.timeouts('implicit', 20);
          d.implicitWaitMs.should.equal(20);
        });
      });
    });
    describe('timeouts (W3C)', function () {
      beforeEach(async function () {
        await d.createSession(null, null, w3cCaps);
      });
      afterEach(async function () {
        await d.deleteSession();
      });
      it('should get timeouts that we set', async function () {
        await d.timeouts(undefined, undefined, undefined, undefined, 1000);
        await d.getTimeouts().should.eventually.have.property('implicit', 1000);
        await d.timeouts('command', 2000);
        await d.getTimeouts().should.eventually.deep.equal({
          implicit: 1000,
          command: 2000
        });
        await d.timeouts(undefined, undefined, undefined, undefined, 3000);
        await d.getTimeouts().should.eventually.deep.equal({
          implicit: 3000,
          command: 2000
        });
      });
    });
    describe('reset compatibility', function () {
      it('should not allow both fullReset and noReset to be true', async function () {
        const newCaps = {
          alwaysMatch: Object.assign({}, defaultCaps, {
            platformName: 'Fake',
            'appium:deviceName': 'Commodore 64',
            'appium:fullReset': true,
            'appium:noReset': true
          })
        };
        await d.createSession(null, null, newCaps).should.eventually.be.rejectedWith(/noReset.+fullReset/);
      });
    });
    describe('proxying', function () {
      let sessId;
      beforeEach(async function () {
        [sessId] = await d.createSession(null, null, w3cCaps);
      });
      describe('#proxyActive', function () {
        it('should exist', function () {
          d.proxyActive.should.be.an.instanceof(Function);
        });
        it('should return false', function () {
          d.proxyActive(sessId).should.be.false;
        });
        it('should throw an error when sessionId is wrong', function () {
          (() => {
            d.proxyActive('aaa');
          }).should.throw;
        });
      });
      describe('#getProxyAvoidList', function () {
        it('should exist', function () {
          d.getProxyAvoidList.should.be.an.instanceof(Function);
        });
        it('should return an array', function () {
          d.getProxyAvoidList(sessId).should.be.an.instanceof(Array);
        });
        it('should throw an error when sessionId is wrong', function () {
          (() => {
            d.getProxyAvoidList('aaa');
          }).should.throw;
        });
      });
      describe('#canProxy', function () {
        it('should have a #canProxy method', function () {
          d.canProxy.should.be.an.instanceof(Function);
        });
        it('should return a boolean from #canProxy', function () {
          d.canProxy(sessId).should.be.a('boolean');
        });
        it('should throw an error when sessionId is wrong', function () {
          (() => {
            d.canProxy();
          }).should.throw;
        });
      });
      describe('#proxyRouteIsAvoided', function () {
        it('should validate form of avoidance list', function () {
          const avoidStub = sandbox.stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /\/foo/], ['GET']]);
          (() => {
            d.proxyRouteIsAvoided();
          }).should.throw;
          avoidStub.returns([['POST', /\/foo/], ['GET', /^foo/, 'bar']]);
          (() => {
            d.proxyRouteIsAvoided();
          }).should.throw;
          avoidStub.restore();
        });
        it('should reject bad http methods', function () {
          const avoidStub = sandbox.stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^foo/], ['BAZETE', /^bar/]]);
          (() => {
            d.proxyRouteIsAvoided();
          }).should.throw;
          avoidStub.restore();
        });
        it('should reject non-regex routes', function () {
          const avoidStub = sandbox.stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^foo/], ['GET', '/bar']]);
          (() => {
            d.proxyRouteIsAvoided();
          }).should.throw;
          avoidStub.restore();
        });
        it('should return true for routes in the avoid list', function () {
          const avoidStub = sandbox.stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^\/foo/]]);
          d.proxyRouteIsAvoided(null, 'POST', '/foo/bar').should.be.true;
          avoidStub.restore();
        });
        it('should strip away any wd/hub prefix', function () {
          const avoidStub = sandbox.stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^\/foo/]]);
          d.proxyRouteIsAvoided(null, 'POST', '/foo/bar').should.be.true;
          avoidStub.restore();
        });
        it('should return false for routes not in the avoid list', function () {
          const avoidStub = sandbox.stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^\/foo/]]);
          d.proxyRouteIsAvoided(null, 'GET', '/foo/bar').should.be.false;
          d.proxyRouteIsAvoided(null, 'POST', '/boo').should.be.false;
          avoidStub.restore();
        });
      });
    });
    describe('event timing framework', function () {
      let beforeStartTime;
      beforeEach(async function () {
        beforeStartTime = Date.now();
        d.shouldValidateCaps = false;
        await d.executeCommand('createSession', null, null, {
          alwaysMatch: { ...defaultCaps
          },
          firstMatch: [{}]
        });
      });
      describe('#eventHistory', function () {
        it('should have an eventHistory property', function () {
          should.exist(d.eventHistory);
          should.exist(d.eventHistory.commands);
        });
        it('should have a session start timing after session start', function () {
          let {
            newSessionRequested,
            newSessionStarted
          } = d.eventHistory;
          newSessionRequested.should.have.length(1);
          newSessionStarted.should.have.length(1);
          newSessionRequested[0].should.be.a('number');
          newSessionStarted[0].should.be.a('number');
          (newSessionRequested[0] >= beforeStartTime).should.be.true;
          (newSessionStarted[0] >= newSessionRequested[0]).should.be.true;
        });
        it('should include a commands list', async function () {
          await d.executeCommand('getStatus', []);
          d.eventHistory.commands.length.should.equal(2);
          d.eventHistory.commands[1].cmd.should.equal('getStatus');
          d.eventHistory.commands[1].startTime.should.be.a('number');
          d.eventHistory.commands[1].endTime.should.be.a('number');
        });
      });
      describe('#logEvent', function () {
        it('should allow logging arbitrary events', function () {
          d.logEvent('foo');
          d.eventHistory.foo[0].should.be.a('number');
          (d.eventHistory.foo[0] >= beforeStartTime).should.be.true;
        });
        it('should not allow reserved or oddly formed event names', function () {
          (() => {
            d.logEvent('commands');
          }).should.throw();
          (() => {
            d.logEvent(1);
          }).should.throw();
          (() => {
            d.logEvent({});
          }).should.throw();
        });
      });
      it('should allow logging the same event multiple times', function () {
        d.logEvent('bar');
        d.logEvent('bar');
        d.eventHistory.bar.should.have.length(2);
        d.eventHistory.bar[1].should.be.a('number');
        (d.eventHistory.bar[1] >= d.eventHistory.bar[0]).should.be.true;
      });
      describe('getSession decoration', function () {
        it('should decorate getSession response if opt-in cap is provided', async function () {
          let res = await d.getSession();
          should.not.exist(res.events);
          d.caps.eventTimings = true;
          res = await d.getSession();
          should.exist(res.events);
          should.exist(res.events.newSessionRequested);
          res.events.newSessionRequested[0].should.be.a('number');
        });
      });
    });
    describe('.reset', function () {
      it('should reset as W3C if the original session was W3C', async function () {
        const caps = {
          alwaysMatch: Object.assign({}, {
            'appium:app': 'Fake',
            'appium:deviceName': 'Fake',
            'appium:automationName': 'Fake',
            platformName: 'Fake'
          }, defaultCaps),
          firstMatch: [{}]
        };
        await d.createSession(undefined, undefined, caps);
        d.protocol.should.equal('W3C');
        await d.reset();
        d.protocol.should.equal('W3C');
      });
    });
  });
  describe('DeviceSettings', function () {
    it('should not hold on to reference of defaults in constructor', function () {
      let obj = {
        foo: 'bar'
      };
      let d1 = new _lib.DeviceSettings(obj);
      let d2 = new _lib.DeviceSettings(obj);
      d1._settings.foo = 'baz';

      d1._settings.should.not.eql(d2._settings);
    });
  });
  describe('.isFeatureEnabled', function () {
    const d = new DriverClass();
    afterEach(function () {
      d.denyInsecure = null;
      d.allowInsecure = null;
      d.relaxedSecurityEnabled = null;
    });
    it('should say a feature is enabled when it is explicitly allowed', function () {
      d.allowInsecure = ['foo', 'bar'];
      d.isFeatureEnabled('foo').should.be.true;
      d.isFeatureEnabled('bar').should.be.true;
      d.isFeatureEnabled('baz').should.be.false;
    });
    it('should say a feature is not enabled if it is not enabled', function () {
      d.allowInsecure = [];
      d.isFeatureEnabled('foo').should.be.false;
    });
    it('should prefer denyInsecure to allowInsecure', function () {
      d.allowInsecure = ['foo', 'bar'];
      d.denyInsecure = ['foo'];
      d.isFeatureEnabled('foo').should.be.false;
      d.isFeatureEnabled('bar').should.be.true;
      d.isFeatureEnabled('baz').should.be.false;
    });
    it('should allow global setting for insecurity', function () {
      d.relaxedSecurityEnabled = true;
      d.isFeatureEnabled('foo').should.be.true;
      d.isFeatureEnabled('bar').should.be.true;
      d.isFeatureEnabled('baz').should.be.true;
    });
    it('global setting should be overrideable', function () {
      d.relaxedSecurityEnabled = true;
      d.denyInsecure = ['foo', 'bar'];
      d.isFeatureEnabled('foo').should.be.false;
      d.isFeatureEnabled('bar').should.be.false;
      d.isFeatureEnabled('baz').should.be.true;
    });
  });
}

var _default = baseDriverUnitTests;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYmFzZWRyaXZlci9kcml2ZXItdGVzdHMuanMiXSwibmFtZXMiOlsiYmFzZURyaXZlclVuaXRUZXN0cyIsIkRyaXZlckNsYXNzIiwiZGVmYXVsdENhcHMiLCJjbGFzc05hbWUiLCJuYW1lIiwiZGVzY3JpYmUiLCJpdCIsImJhc2VWZXJzaW9uIiwic2hvdWxkIiwiZXhpc3QiLCJkIiwicHJldmlvdXNQcmVmaXgiLCJsb2ciLCJwcmVmaXgiLCJjcmVhdGVTZXNzaW9uIiwiYWx3YXlzTWF0Y2giLCJPYmplY3QiLCJhc3NpZ24iLCJwbGF0Zm9ybU5hbWUiLCJmaXJzdE1hdGNoIiwibm90IiwiZXFsIiwiZGVsZXRlU2Vzc2lvbiIsInczY0NhcHMiLCJzYW5kYm94IiwiYmVmb3JlRWFjaCIsImFmdGVyRWFjaCIsInJlc3RvcmUiLCJzdGF0dXMiLCJnZXRTdGF0dXMiLCJzZXNzSWQiLCJiZSIsImEiLCJsZW5ndGgiLCJhYm92ZSIsIl8iLCJjbG9uZURlZXAiLCJldmVudHVhbGx5IiwicmVqZWN0ZWRXaXRoIiwic2Vzc2lvbklkMSIsImVxdWFsIiwic2Vzc2lvbklkIiwic2Vzc2lvbklkMiIsImNhcHMiLCJnZXRTZXNzaW9uIiwic2Vzc2lvbnMiLCJnZXRTZXNzaW9ucyIsImNsb25lIiwiaW5jbHVkZSIsImlkIiwiY2FwYWJpbGl0aWVzIiwiZGV2aWNlTmFtZSIsIkIiLCJkZWxheSIsImJpbmQiLCJjbWRQcm9taXNlIiwiZXhlY3V0ZUNvbW1hbmQiLCJwIiwicmVzb2x2ZSIsInJlamVjdCIsInNldFRpbWVvdXQiLCJFcnJvciIsIm9uVW5leHBlY3RlZFNodXRkb3duIiwic3RhcnRVbmV4cGVjdGVkU2h1dGRvd24iLCJvbGREZWxldGVTZXNzaW9uIiwicHJvdG9jb2wiLCJkcml2ZXJGb3JTZXNzaW9uIiwid2FpdE1zIiwiRGF0ZSIsIm5vdyIsImNsZWFyTmV3Q29tbWFuZFRpbWVvdXQiLCJudW1DbWRzIiwiY21kcyIsImkiLCJwdXNoIiwicmVzdWx0cyIsImFsbCIsInNldHRsZSIsInZhbHVlIiwicmVhc29uIiwibWVzc2FnZSIsImNvbnRhaW4iLCJiZWZvcmUiLCJuZXdDb21tYW5kVGltZW91dE1zIiwidGltZW91dHMiLCJpbXBsaWNpdFdhaXRNcyIsInVuZGVmaW5lZCIsImdldFRpbWVvdXRzIiwiaGF2ZSIsInByb3BlcnR5IiwiZGVlcCIsImltcGxpY2l0IiwiY29tbWFuZCIsIm5ld0NhcHMiLCJwcm94eUFjdGl2ZSIsImFuIiwiaW5zdGFuY2VvZiIsIkZ1bmN0aW9uIiwiZmFsc2UiLCJ0aHJvdyIsImdldFByb3h5QXZvaWRMaXN0IiwiQXJyYXkiLCJjYW5Qcm94eSIsImF2b2lkU3R1YiIsInN0dWIiLCJyZXR1cm5zIiwicHJveHlSb3V0ZUlzQXZvaWRlZCIsInRydWUiLCJiZWZvcmVTdGFydFRpbWUiLCJzaG91bGRWYWxpZGF0ZUNhcHMiLCJldmVudEhpc3RvcnkiLCJjb21tYW5kcyIsIm5ld1Nlc3Npb25SZXF1ZXN0ZWQiLCJuZXdTZXNzaW9uU3RhcnRlZCIsImNtZCIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJsb2dFdmVudCIsImZvbyIsImJhciIsInJlcyIsImV2ZW50cyIsImV2ZW50VGltaW5ncyIsInJlc2V0Iiwib2JqIiwiZDEiLCJEZXZpY2VTZXR0aW5ncyIsImQyIiwiX3NldHRpbmdzIiwiZGVueUluc2VjdXJlIiwiYWxsb3dJbnNlY3VyZSIsInJlbGF4ZWRTZWN1cml0eUVuYWJsZWQiLCJpc0ZlYXR1cmVFbmFibGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUtBLFNBQVNBLG1CQUFULENBQThCQyxXQUE5QixFQUEyQ0MsV0FBVyxHQUFHLEVBQXpELEVBQTZEO0FBRTNELFFBQU1DLFNBQVMsR0FBR0YsV0FBVyxDQUFDRyxJQUFaLElBQW9CLGtCQUF0QztBQUVBQyxFQUFBQSxRQUFRLENBQUMsaUJBQUQsRUFBb0IsWUFBWTtBQUN0Q0EsSUFBQUEsUUFBUSxDQUFDLGFBQUQsRUFB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LENBQUMsQ0FBQzBILGdCQUFGLENBQW1CLEtBQW5CLEVBQTBCNUgsTUFBMUIsQ0FBaUN1QixFQUFqQyxDQUFvQ21FLEtBQXBDO0FBQ0F4RixNQUFBQSxDQUFDLENBQUMwSCxnQkFBRixDQUFtQixLQUFuQixFQUEwQjVILE1BQTFCLENBQWlDdUIsRUFBakMsQ0FBb0NtRSxLQUFwQztBQUNBeEYsTUFBQUEsQ0FBQyxDQUFDMEgsZ0JBQUYsQ0FBbUIsS0FBbkIsRUFBMEI1SCxNQUExQixDQUFpQ3VCLEVBQWpDLENBQW9DNEUsSUFBcEM7QUFDRCxLQU5DLENBQUY7QUFPRCxHQTNDTyxDQUFSO0FBNENEOztlQUVjM0csbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgRGV2aWNlU2V0dGluZ3MgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IHsgY3JlYXRlU2FuZGJveCB9IGZyb20gJ3Npbm9uJztcblxuXG4vLyB3cmFwIHRoZXNlIHRlc3RzIGluIGEgZnVuY3Rpb24gc28gd2UgY2FuIGV4cG9ydCB0aGUgdGVzdHMgYW5kIHJlLXVzZSB0aGVtXG4vLyBmb3IgYWN0dWFsIGRyaXZlciBpbXBsZW1lbnRhdGlvbnNcbmZ1bmN0aW9uIGJhc2VEcml2ZXJVbml0VGVzdHMgKERyaXZlckNsYXNzLCBkZWZhdWx0Q2FwcyA9IHt9KSB7XG4gIC8vIHRvIGRpc3BsYXkgdGhlIGRyaXZlciB1bmRlciB0ZXN0IGluIHJlcG9ydFxuICBjb25zdCBjbGFzc05hbWUgPSBEcml2ZXJDbGFzcy5uYW1lIHx8ICcodW5rbm93biBkcml2ZXIpJztcblxuICBkZXNjcmliZSgnc3RhdGljIHByb3BlcnR5JywgZnVuY3Rpb24gKCkge1xuICAgIGRlc2NyaWJlKCdiYXNlVmVyc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIERyaXZlckNsYXNzLmJhc2VWZXJzaW9uLnNob3VsZC5leGlzdDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnTG9nIHByZWZpeCcsIGZ1bmN0aW9uICgpIHtcblxuICAgIGl0KCdzaG91bGQgc2V0dXAgbG9nIHByZWZpeCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgRHJpdmVyQ2xhc3MoKTtcbiAgICAgIGNvbnN0IHByZXZpb3VzUHJlZml4ID0gZC5sb2cucHJlZml4O1xuICAgICAgYXdhaXQgZC5jcmVhdGVTZXNzaW9uKHtcbiAgICAgICAgYWx3YXlzTWF0Y2g6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDYXBzLCB7XG4gICAgICAgICAgcGxhdGZvcm1OYW1lOiAnRmFrZScsXG4gICAgICAgICAgJ2FwcGl1bTpkZXZpY2VOYW1lJzogJ0NvbW1vZG9yZSA2NCcsXG4gICAgICAgIH0pLFxuICAgICAgICBmaXJzdE1hdGNoOiBbe31dLFxuICAgICAgfSk7XG4gICAgICB0cnkge1xuICAgICAgICBwcmV2aW91c1ByZWZpeC5zaG91bGQubm90LmVxbChkLmxvZy5wcmVmaXgpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgYXdhaXQgZC5kZWxldGVTZXNzaW9uKCk7XG4gICAgICAgIHByZXZpb3VzUHJlZml4LnNob3VsZC5lcWwoZC5sb2cucHJlZml4KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9KTtcblxuICBkZXNjcmliZShgQmFzZURyaXZlciAoYXMgJHtjbGFzc05hbWV9KWAsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZCwgdzNjQ2FwcztcblxuICAgIGxldCBzYW5kYm94O1xuXG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94ID0gY3JlYXRlU2FuZGJveCgpO1xuICAgICAgZCA9IG5ldyBEcml2ZXJDbGFzcygpO1xuICAgICAgdzNjQ2FwcyA9IHtcbiAgICAgICAgYWx3YXlzTWF0Y2g6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDYXBzLCB7XG4gICAgICAgICAgcGxhdGZvcm1OYW1lOiAnRmFrZScsXG4gICAgICAgICAgJ2FwcGl1bTpkZXZpY2VOYW1lJzogJ0NvbW1vZG9yZSA2NCcsXG4gICAgICAgIH0pLFxuICAgICAgICBmaXJzdE1hdGNoOiBbe31dLFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBhZnRlckVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZC5kZWxldGVTZXNzaW9uKCk7XG4gICAgICBzYW5kYm94LnJlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVwb3J0IHRoZSB2ZXJzaW9uIG9mIEJhc2VEcml2ZXIgdXNlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNob3VsZC5leGlzdChEcml2ZXJDbGFzcy5iYXNlVmVyc2lvbik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlbXB0eSBzdGF0dXMgb2JqZWN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHN0YXR1cyA9IGF3YWl0IGQuZ2V0U3RhdHVzKCk7XG4gICAgICBzdGF0dXMuc2hvdWxkLmVxbCh7fSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIHNlc3Npb25JZCBmcm9tIGNyZWF0ZVNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgW3Nlc3NJZF0gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwgdzNjQ2Fwcyk7XG4gICAgICBzaG91bGQuZXhpc3Qoc2Vzc0lkKTtcbiAgICAgIHNlc3NJZC5zaG91bGQuYmUuYSgnc3RyaW5nJyk7XG4gICAgICBzZXNzSWQubGVuZ3RoLnNob3VsZC5iZS5hYm92ZSg1KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IGJlIGFibGUgdG8gc3RhcnQgdHdvIHNlc3Npb25zIHdpdGhvdXQgY2xvc2luZyB0aGUgZmlyc3QnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwgXy5jbG9uZURlZXAodzNjQ2FwcykpO1xuICAgICAgYXdhaXQgZC5jcmVhdGVTZXNzaW9uKG51bGwsIG51bGwsIF8uY2xvbmVEZWVwKHczY0NhcHMpKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoJ3Nlc3Npb24nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBkZWxldGUgYSBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHNlc3Npb25JZDEgPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwgXy5jbG9uZURlZXAodzNjQ2FwcykpO1xuICAgICAgYXdhaXQgZC5kZWxldGVTZXNzaW9uKCk7XG4gICAgICBzaG91bGQuZXF1YWwoZC5zZXNzaW9uSWQsIG51bGwpO1xuICAgICAgbGV0IHNlc3Npb25JZDIgPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwgXy5jbG9uZURlZXAodzNjQ2FwcykpO1xuICAgICAgc2Vzc2lvbklkMS5zaG91bGQubm90LmVxbChzZXNzaW9uSWQyKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2V0IHRoZSBjdXJyZW50IHNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgWywgY2Fwc10gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwgdzNjQ2Fwcyk7XG4gICAgICBjYXBzLnNob3VsZC5lcXVhbChhd2FpdCBkLmdldFNlc3Npb24oKSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBzZXNzaW9ucyBpZiBubyBzZXNzaW9uIGV4aXN0cycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzZXNzaW9ucyA9IGF3YWl0IGQuZ2V0U2Vzc2lvbnMoKTtcbiAgICAgIHNlc3Npb25zLmxlbmd0aC5zaG91bGQuZXF1YWwoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBzZXNzaW9ucycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNhcHMgPSBfLmNsb25lKHczY0NhcHMpO1xuICAgICAgY2Fwcy5hID0gJ2NhcCc7XG4gICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwgY2Fwcyk7XG4gICAgICBsZXQgc2Vzc2lvbnMgPSBhd2FpdCBkLmdldFNlc3Npb25zKCk7XG5cbiAgICAgIHNlc3Npb25zLmxlbmd0aC5zaG91bGQuZXF1YWwoMSk7XG4gICAgICBzZXNzaW9uc1swXS5zaG91bGQuaW5jbHVkZSh7XG4gICAgICAgIGlkOiBkLnNlc3Npb25JZFxuICAgICAgfSk7XG4gICAgICBzZXNzaW9uc1swXS5jYXBhYmlsaXRpZXMuc2hvdWxkLmluY2x1ZGUoe1xuICAgICAgICBkZXZpY2VOYW1lOiAnQ29tbW9kb3JlIDY0JyxcbiAgICAgICAgcGxhdGZvcm1OYW1lOiAnRmFrZSdcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmdWxmaWxsIGFuIHVuZXhwZWN0ZWQgZHJpdmVyIHF1aXQgcHJvbWlzZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIG1ha2UgYSBjb21tYW5kIHRoYXQgd2lsbCB3YWl0IGEgYml0IHNvIHdlIGNhbiBjcmFzaCB3aGlsZSBpdCdzIHJ1bm5pbmdcbiAgICAgIGQuZ2V0U3RhdHVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBCLmRlbGF5KDEwMDApO1xuICAgICAgICByZXR1cm4gJ2dvb2Qgc3RhdHVzJztcbiAgICAgIH0uYmluZChkKTtcbiAgICAgIGxldCBjbWRQcm9taXNlID0gZC5leGVjdXRlQ29tbWFuZCgnZ2V0U3RhdHVzJyk7XG4gICAgICBhd2FpdCBCLmRlbGF5KDEwKTtcbiAgICAgIGNvbnN0IHAgPSBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignb25VbmV4cGVjdGVkU2h1dGRvd24gZXZlbnQgaXMgZXhwZWN0ZWQgdG8gYmUgZmlyZWQgd2l0aGluIDUgc2Vjb25kcyB0aW1lb3V0JykpLCA1MDAwKTtcbiAgICAgICAgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bihyZXNvbHZlKTtcbiAgICAgIH0pO1xuICAgICAgZC5zdGFydFVuZXhwZWN0ZWRTaHV0ZG93bihuZXcgRXJyb3IoJ1dlIGNyYXNoZWQnKSk7XG4gICAgICBhd2FpdCBjbWRQcm9taXNlLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL1dlIGNyYXNoZWQvKTtcbiAgICAgIGF3YWl0IHA7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBhbGxvdyBjb21tYW5kcyBpbiBtaWRkbGUgb2YgdW5leHBlY3RlZCBzaHV0ZG93bicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIG1ha2UgYSBjb21tYW5kIHRoYXQgd2lsbCB3YWl0IGEgYml0IHNvIHdlIGNhbiBjcmFzaCB3aGlsZSBpdCdzIHJ1bm5pbmdcbiAgICAgIGQub2xkRGVsZXRlU2Vzc2lvbiA9IGQuZGVsZXRlU2Vzc2lvbjtcbiAgICAgIGQuZGVsZXRlU2Vzc2lvbiA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgQi5kZWxheSgxMDApO1xuICAgICAgICBhd2FpdCB0aGlzLm9sZERlbGV0ZVNlc3Npb24oKTtcbiAgICAgIH0uYmluZChkKTtcbiAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihudWxsLCBudWxsLCB3M2NDYXBzKTtcbiAgICAgIGNvbnN0IHAgPSBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignb25VbmV4cGVjdGVkU2h1dGRvd24gZXZlbnQgaXMgZXhwZWN0ZWQgdG8gYmUgZmlyZWQgd2l0aGluIDUgc2Vjb25kcyB0aW1lb3V0JykpLCA1MDAwKTtcbiAgICAgICAgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bihyZXNvbHZlKTtcbiAgICAgIH0pO1xuICAgICAgZC5zdGFydFVuZXhwZWN0ZWRTaHV0ZG93bihuZXcgRXJyb3IoJ1dlIGNyYXNoZWQnKSk7XG4gICAgICBhd2FpdCBwO1xuICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnZ2V0U2Vzc2lvbicpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL3NodXQgZG93bi8pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBuZXcgY29tbWFuZHMgYWZ0ZXIgZG9uZSBzaHV0dGluZyBkb3duJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gbWFrZSBhIGNvbW1hbmQgdGhhdCB3aWxsIHdhaXQgYSBiaXQgc28gd2UgY2FuIGNyYXNoIHdoaWxlIGl0J3MgcnVubmluZ1xuICAgICAgZC5vbGREZWxldGVTZXNzaW9uID0gZC5kZWxldGVTZXNzaW9uO1xuICAgICAgZC5kZWxldGVTZXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBCLmRlbGF5KDEwMCk7XG4gICAgICAgIGF3YWl0IHRoaXMub2xkRGVsZXRlU2Vzc2lvbigpO1xuICAgICAgfS5iaW5kKGQpO1xuXG4gICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwgXy5jbG9uZURlZXAodzNjQ2FwcykpO1xuICAgICAgY29uc3QgcCA9IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdvblVuZXhwZWN0ZWRTaHV0ZG93biBldmVudCBpcyBleHBlY3RlZCB0byBiZSBmaXJlZCB3aXRoaW4gNSBzZWNvbmRzIHRpbWVvdXQnKSksIDUwMDApO1xuICAgICAgICBkLm9uVW5leHBlY3RlZFNodXRkb3duKHJlc29sdmUpO1xuICAgICAgfSk7XG4gICAgICBkLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcignV2UgY3Jhc2hlZCcpKTtcbiAgICAgIGF3YWl0IHA7XG5cbiAgICAgIGF3YWl0IGQuZXhlY3V0ZUNvbW1hbmQoJ2dldFNlc3Npb24nKS5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9zaHV0IGRvd24vKTtcbiAgICAgIGF3YWl0IEIuZGVsYXkoNTAwKTtcblxuICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnY3JlYXRlU2Vzc2lvbicsIG51bGwsIG51bGwsIF8uY2xvbmVEZWVwKHczY0NhcHMpKTtcbiAgICAgIGF3YWl0IGQuZGVsZXRlU2Vzc2lvbigpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkaXN0aW5ndWlzaCBiZXR3ZWVuIFczQyBhbmQgSlNPTldQIHNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBUZXN0IFczQyAobGVhdmUgZmlyc3QgMiBhcmdzIG51bGwgYmVjYXVzZSB0aG9zZSBhcmUgdGhlIEpTT05XUCBhcmdzKVxuICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnY3JlYXRlU2Vzc2lvbicsIG51bGwsIG51bGwsIHtcbiAgICAgICAgYWx3YXlzTWF0Y2g6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDYXBzLCB7XG4gICAgICAgICAgcGxhdGZvcm1OYW1lOiAnRmFrZScsXG4gICAgICAgICAgJ2FwcGl1bTpkZXZpY2VOYW1lJzogJ0NvbW1vZG9yZSA2NCcsXG4gICAgICAgIH0pLFxuICAgICAgICBmaXJzdE1hdGNoOiBbe31dLFxuICAgICAgfSk7XG5cbiAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdXM0MnKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdwcm90b2NvbCBkZXRlY3Rpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIHVzZSBXM0MgaWYgb25seSBXM0MgY2FwcyBhcmUgcHJvdmlkZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihudWxsLCBudWxsLCB7YWx3YXlzTWF0Y2g6IF8uY2xvbmUoZGVmYXVsdENhcHMpLCBmaXJzdE1hdGNoOiBbe31dfSk7XG4gICAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdXM0MnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYXZlIGEgbWV0aG9kIHRvIGdldCBkcml2ZXIgZm9yIGEgc2Vzc2lvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBbc2Vzc0lkXSA9IGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihudWxsLCBudWxsLCB3M2NDYXBzKTtcbiAgICAgIGQuZHJpdmVyRm9yU2Vzc2lvbihzZXNzSWQpLnNob3VsZC5lcWwoZCk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY29tbWFuZCBxdWV1ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkID0gbmV3IERyaXZlckNsYXNzKCk7XG5cbiAgICAgIGxldCB3YWl0TXMgPSAxMDtcbiAgICAgIGQuZ2V0U3RhdHVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBCLmRlbGF5KHdhaXRNcyk7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgICAgfS5iaW5kKGQpO1xuXG4gICAgICBkLmdldFNlc3Npb25zID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBCLmRlbGF5KHdhaXRNcyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbXVsdGlwYXNzJyk7XG4gICAgICB9LmJpbmQoZCk7XG5cbiAgICAgIGFmdGVyRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuY2xlYXJOZXdDb21tYW5kVGltZW91dCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcXVldWUgY29tbWFuZHMgYW5kLmV4ZWN1dGVDb21tYW5kL3Jlc3BvbmQgaW4gdGhlIG9yZGVyIHJlY2VpdmVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgbnVtQ21kcyA9IDEwO1xuICAgICAgICBsZXQgY21kcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBCLmFsbChjbWRzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBudW1DbWRzOyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0c1tpXSA8PSByZXN1bHRzW2kgLSAxXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHb3QgcmVzdWx0IG91dCBvZiBvcmRlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIGVycm9ycyBjb3JyZWN0bHkgd2hlbiBxdWV1aW5nJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgbnVtQ21kcyA9IDEwO1xuICAgICAgICBsZXQgY21kcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGlmIChpID09PSA1KSB7XG4gICAgICAgICAgICBjbWRzLnB1c2goZC5leGVjdXRlQ29tbWFuZCgnZ2V0U2Vzc2lvbnMnKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgQi5zZXR0bGUoY21kcyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdHNbaV0udmFsdWUoKSA8PSByZXN1bHRzW2kgLSAxXS52YWx1ZSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdCByZXN1bHQgb3V0IG9mIG9yZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHNbNV0ucmVhc29uKCkubWVzc2FnZS5zaG91bGQuY29udGFpbignbXVsdGlwYXNzJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSA3OyBpIDwgbnVtQ21kczsgaSsrKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdHNbaV0udmFsdWUoKSA8PSByZXN1bHRzW2kgLSAxXS52YWx1ZSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdCByZXN1bHQgb3V0IG9mIG9yZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3QgY2FyZSBpZiBxdWV1ZSBlbXB0aWVzIGZvciBhIGJpdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IG51bUNtZHMgPSAxMDtcbiAgICAgICAgbGV0IGNtZHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1DbWRzOyBpKyspIHtcbiAgICAgICAgICBjbWRzLnB1c2goZC5leGVjdXRlQ29tbWFuZCgnZ2V0U3RhdHVzJykpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgQi5hbGwoY21kcyk7XG4gICAgICAgIGNtZHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1DbWRzOyBpKyspIHtcbiAgICAgICAgICBjbWRzLnB1c2goZC5leGVjdXRlQ29tbWFuZCgnZ2V0U3RhdHVzJykpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMgPSBhd2FpdCBCLmFsbChjbWRzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBudW1DbWRzOyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0c1tpXSA8PSByZXN1bHRzW2kgLSAxXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHb3QgcmVzdWx0IG91dCBvZiBvcmRlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndGltZW91dHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwgdzNjQ2Fwcyk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCdjb21tYW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIGV4aXN0IGJ5IGRlZmF1bHQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5uZXdDb21tYW5kVGltZW91dE1zLnNob3VsZC5lcXVhbCg2MDAwMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGJlIHNldHRhYmxlIHRocm91Z2ggYHRpbWVvdXRzYCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKCdjb21tYW5kJywgMjApO1xuICAgICAgICAgIGQubmV3Q29tbWFuZFRpbWVvdXRNcy5zaG91bGQuZXF1YWwoMjApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJ2ltcGxpY2l0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIG5vdCBleGlzdCBieSBkZWZhdWx0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQuaW1wbGljaXRXYWl0TXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBzZXR0YWJsZSB0aHJvdWdoIGB0aW1lb3V0c2AnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYXdhaXQgZC50aW1lb3V0cygnaW1wbGljaXQnLCAyMCk7XG4gICAgICAgICAgZC5pbXBsaWNpdFdhaXRNcy5zaG91bGQuZXF1YWwoMjApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3RpbWVvdXRzIChXM0MpJywgZnVuY3Rpb24gKCkge1xuICAgICAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihudWxsLCBudWxsLCB3M2NDYXBzKTtcbiAgICAgIH0pO1xuICAgICAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgZC5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgZ2V0IHRpbWVvdXRzIHRoYXQgd2Ugc2V0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgMTAwMCk7XG4gICAgICAgIGF3YWl0IGQuZ2V0VGltZW91dHMoKS5zaG91bGQuZXZlbnR1YWxseS5oYXZlLnByb3BlcnR5KCdpbXBsaWNpdCcsIDEwMDApO1xuICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKCdjb21tYW5kJywgMjAwMCk7XG4gICAgICAgIGF3YWl0IGQuZ2V0VGltZW91dHMoKS5zaG91bGQuZXZlbnR1YWxseS5kZWVwLmVxdWFsKHtcbiAgICAgICAgICBpbXBsaWNpdDogMTAwMCxcbiAgICAgICAgICBjb21tYW5kOiAyMDAwLFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgZC50aW1lb3V0cyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIDMwMDApO1xuICAgICAgICBhd2FpdCBkLmdldFRpbWVvdXRzKCkuc2hvdWxkLmV2ZW50dWFsbHkuZGVlcC5lcXVhbCh7XG4gICAgICAgICAgaW1wbGljaXQ6IDMwMDAsXG4gICAgICAgICAgY29tbWFuZDogMjAwMCxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdyZXNldCBjb21wYXRpYmlsaXR5JywgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoJ3Nob3VsZCBub3QgYWxsb3cgYm90aCBmdWxsUmVzZXQgYW5kIG5vUmVzZXQgdG8gYmUgdHJ1ZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgbmV3Q2FwcyA9IHtcbiAgICAgICAgICBhbHdheXNNYXRjaDogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENhcHMsIHtcbiAgICAgICAgICAgIHBsYXRmb3JtTmFtZTogJ0Zha2UnLFxuICAgICAgICAgICAgJ2FwcGl1bTpkZXZpY2VOYW1lJzogJ0NvbW1vZG9yZSA2NCcsXG4gICAgICAgICAgICAnYXBwaXVtOmZ1bGxSZXNldCc6IHRydWUsXG4gICAgICAgICAgICAnYXBwaXVtOm5vUmVzZXQnOiB0cnVlXG4gICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihudWxsLCBudWxsLCBuZXdDYXBzKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoXG4gICAgICAgICAgICAvbm9SZXNldC4rZnVsbFJlc2V0Lyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdwcm94eWluZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzZXNzSWQ7XG4gICAgICBiZWZvcmVFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgW3Nlc3NJZF0gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwgdzNjQ2Fwcyk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCcjcHJveHlBY3RpdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5wcm94eUFjdGl2ZS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkLnByb3h5QWN0aXZlKHNlc3NJZCkuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIHNlc3Npb25JZCBpcyB3cm9uZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAoKCkgPT4geyBkLnByb3h5QWN0aXZlKCdhYWEnKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnI2dldFByb3h5QXZvaWRMaXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIGV4aXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQuZ2V0UHJveHlBdm9pZExpc3Quc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoRnVuY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gYXJyYXknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5nZXRQcm94eUF2b2lkTGlzdChzZXNzSWQpLnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBzZXNzaW9uSWQgaXMgd3JvbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgKCgpID0+IHsgZC5nZXRQcm94eUF2b2lkTGlzdCgnYWFhJyk7IH0pLnNob3VsZC50aHJvdztcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJyNjYW5Qcm94eScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBoYXZlIGEgI2NhblByb3h5IG1ldGhvZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkLmNhblByb3h5LnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEZ1bmN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgYm9vbGVhbiBmcm9tICNjYW5Qcm94eScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkLmNhblByb3h5KHNlc3NJZCkuc2hvdWxkLmJlLmEoJ2Jvb2xlYW4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBzZXNzaW9uSWQgaXMgd3JvbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgKCgpID0+IHsgZC5jYW5Qcm94eSgpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCcjcHJveHlSb3V0ZUlzQXZvaWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBmb3JtIG9mIGF2b2lkYW5jZSBsaXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IGF2b2lkU3R1YiA9IHNhbmRib3guc3R1YihkLCAnZ2V0UHJveHlBdm9pZExpc3QnKTtcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL1xcL2Zvby9dLCBbJ0dFVCddXSk7XG4gICAgICAgICAgKCgpID0+IHsgZC5wcm94eVJvdXRlSXNBdm9pZGVkKCk7IH0pLnNob3VsZC50aHJvdztcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL1xcL2Zvby9dLCBbJ0dFVCcsIC9eZm9vLywgJ2JhciddXSk7XG4gICAgICAgICAgKCgpID0+IHsgZC5wcm94eVJvdXRlSXNBdm9pZGVkKCk7IH0pLnNob3VsZC50aHJvdztcbiAgICAgICAgICBhdm9pZFN0dWIucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZWplY3QgYmFkIGh0dHAgbWV0aG9kcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zdCBhdm9pZFN0dWIgPSBzYW5kYm94LnN0dWIoZCwgJ2dldFByb3h5QXZvaWRMaXN0Jyk7XG4gICAgICAgICAgYXZvaWRTdHViLnJldHVybnMoW1snUE9TVCcsIC9eZm9vL10sIFsnQkFaRVRFJywgL15iYXIvXV0pO1xuICAgICAgICAgICgoKSA9PiB7IGQucHJveHlSb3V0ZUlzQXZvaWRlZCgpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgICAgYXZvaWRTdHViLnJlc3RvcmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmVqZWN0IG5vbi1yZWdleCByb3V0ZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2FuZGJveC5zdHViKGQsICdnZXRQcm94eUF2b2lkTGlzdCcpO1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXR1cm5zKFtbJ1BPU1QnLCAvXmZvby9dLCBbJ0dFVCcsICcvYmFyJ11dKTtcbiAgICAgICAgICAoKCkgPT4geyBkLnByb3h5Um91dGVJc0F2b2lkZWQoKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIGZvciByb3V0ZXMgaW4gdGhlIGF2b2lkIGxpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2FuZGJveC5zdHViKGQsICdnZXRQcm94eUF2b2lkTGlzdCcpO1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXR1cm5zKFtbJ1BPU1QnLCAvXlxcL2Zvby9dXSk7XG4gICAgICAgICAgZC5wcm94eVJvdXRlSXNBdm9pZGVkKG51bGwsICdQT1NUJywgJy9mb28vYmFyJykuc2hvdWxkLmJlLnRydWU7XG4gICAgICAgICAgYXZvaWRTdHViLnJlc3RvcmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgc3RyaXAgYXdheSBhbnkgd2QvaHViIHByZWZpeCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zdCBhdm9pZFN0dWIgPSBzYW5kYm94LnN0dWIoZCwgJ2dldFByb3h5QXZvaWRMaXN0Jyk7XG4gICAgICAgICAgYXZvaWRTdHViLnJldHVybnMoW1snUE9TVCcsIC9eXFwvZm9vL11dKTtcbiAgICAgICAgICBkLnByb3h5Um91dGVJc0F2b2lkZWQobnVsbCwgJ1BPU1QnLCAnL2Zvby9iYXInKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgICAgICBhdm9pZFN0dWIucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgZm9yIHJvdXRlcyBub3QgaW4gdGhlIGF2b2lkIGxpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2FuZGJveC5zdHViKGQsICdnZXRQcm94eUF2b2lkTGlzdCcpO1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXR1cm5zKFtbJ1BPU1QnLCAvXlxcL2Zvby9dXSk7XG4gICAgICAgICAgZC5wcm94eVJvdXRlSXNBdm9pZGVkKG51bGwsICdHRVQnLCAnL2Zvby9iYXInKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgICAgICAgZC5wcm94eVJvdXRlSXNBdm9pZGVkKG51bGwsICdQT1NUJywgJy9ib28nKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgICAgICAgYXZvaWRTdHViLnJlc3RvcmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdldmVudCB0aW1pbmcgZnJhbWV3b3JrJywgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGJlZm9yZVN0YXJ0VGltZTtcbiAgICAgIGJlZm9yZUVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBiZWZvcmVTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBkLnNob3VsZFZhbGlkYXRlQ2FwcyA9IGZhbHNlO1xuICAgICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdjcmVhdGVTZXNzaW9uJywgbnVsbCwgbnVsbCwge2Fsd2F5c01hdGNoOiB7Li4uZGVmYXVsdENhcHN9LCBmaXJzdE1hdGNoOiBbe31dfSk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCcjZXZlbnRIaXN0b3J5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIGhhdmUgYW4gZXZlbnRIaXN0b3J5IHByb3BlcnR5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNob3VsZC5leGlzdChkLmV2ZW50SGlzdG9yeSk7XG4gICAgICAgICAgc2hvdWxkLmV4aXN0KGQuZXZlbnRIaXN0b3J5LmNvbW1hbmRzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBoYXZlIGEgc2Vzc2lvbiBzdGFydCB0aW1pbmcgYWZ0ZXIgc2Vzc2lvbiBzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsZXQge25ld1Nlc3Npb25SZXF1ZXN0ZWQsIG5ld1Nlc3Npb25TdGFydGVkfSA9IGQuZXZlbnRIaXN0b3J5O1xuICAgICAgICAgIG5ld1Nlc3Npb25SZXF1ZXN0ZWQuc2hvdWxkLmhhdmUubGVuZ3RoKDEpO1xuICAgICAgICAgIG5ld1Nlc3Npb25TdGFydGVkLnNob3VsZC5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgICBuZXdTZXNzaW9uUmVxdWVzdGVkWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgICBuZXdTZXNzaW9uU3RhcnRlZFswXS5zaG91bGQuYmUuYSgnbnVtYmVyJyk7XG4gICAgICAgICAgKG5ld1Nlc3Npb25SZXF1ZXN0ZWRbMF0gPj0gYmVmb3JlU3RhcnRUaW1lKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgICAgICAobmV3U2Vzc2lvblN0YXJ0ZWRbMF0gPj0gbmV3U2Vzc2lvblJlcXVlc3RlZFswXSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgaW5jbHVkZSBhIGNvbW1hbmRzIGxpc3QnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnZ2V0U3RhdHVzJywgW10pO1xuICAgICAgICAgIGQuZXZlbnRIaXN0b3J5LmNvbW1hbmRzLmxlbmd0aC5zaG91bGQuZXF1YWwoMik7XG4gICAgICAgICAgZC5ldmVudEhpc3RvcnkuY29tbWFuZHNbMV0uY21kLnNob3VsZC5lcXVhbCgnZ2V0U3RhdHVzJyk7XG4gICAgICAgICAgZC5ldmVudEhpc3RvcnkuY29tbWFuZHNbMV0uc3RhcnRUaW1lLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgICBkLmV2ZW50SGlzdG9yeS5jb21tYW5kc1sxXS5lbmRUaW1lLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCcjbG9nRXZlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgYWxsb3cgbG9nZ2luZyBhcmJpdHJhcnkgZXZlbnRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQubG9nRXZlbnQoJ2ZvbycpO1xuICAgICAgICAgIGQuZXZlbnRIaXN0b3J5LmZvb1swXS5zaG91bGQuYmUuYSgnbnVtYmVyJyk7XG4gICAgICAgICAgKGQuZXZlbnRIaXN0b3J5LmZvb1swXSA+PSBiZWZvcmVTdGFydFRpbWUpLnNob3VsZC5iZS50cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBub3QgYWxsb3cgcmVzZXJ2ZWQgb3Igb2RkbHkgZm9ybWVkIGV2ZW50IG5hbWVzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICBkLmxvZ0V2ZW50KCdjb21tYW5kcycpO1xuICAgICAgICAgIH0pLnNob3VsZC50aHJvdygpO1xuICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICBkLmxvZ0V2ZW50KDEpO1xuICAgICAgICAgIH0pLnNob3VsZC50aHJvdygpO1xuICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICBkLmxvZ0V2ZW50KHt9KTtcbiAgICAgICAgICB9KS5zaG91bGQudGhyb3coKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgYWxsb3cgbG9nZ2luZyB0aGUgc2FtZSBldmVudCBtdWx0aXBsZSB0aW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZC5sb2dFdmVudCgnYmFyJyk7XG4gICAgICAgIGQubG9nRXZlbnQoJ2JhcicpO1xuICAgICAgICBkLmV2ZW50SGlzdG9yeS5iYXIuc2hvdWxkLmhhdmUubGVuZ3RoKDIpO1xuICAgICAgICBkLmV2ZW50SGlzdG9yeS5iYXJbMV0uc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICAoZC5ldmVudEhpc3RvcnkuYmFyWzFdID49IGQuZXZlbnRIaXN0b3J5LmJhclswXSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCdnZXRTZXNzaW9uIGRlY29yYXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgZGVjb3JhdGUgZ2V0U2Vzc2lvbiByZXNwb25zZSBpZiBvcHQtaW4gY2FwIGlzIHByb3ZpZGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxldCByZXMgPSBhd2FpdCBkLmdldFNlc3Npb24oKTtcbiAgICAgICAgICBzaG91bGQubm90LmV4aXN0KHJlcy5ldmVudHMpO1xuXG4gICAgICAgICAgZC5jYXBzLmV2ZW50VGltaW5ncyA9IHRydWU7XG4gICAgICAgICAgcmVzID0gYXdhaXQgZC5nZXRTZXNzaW9uKCk7XG4gICAgICAgICAgc2hvdWxkLmV4aXN0KHJlcy5ldmVudHMpO1xuICAgICAgICAgIHNob3VsZC5leGlzdChyZXMuZXZlbnRzLm5ld1Nlc3Npb25SZXF1ZXN0ZWQpO1xuICAgICAgICAgIHJlcy5ldmVudHMubmV3U2Vzc2lvblJlcXVlc3RlZFswXS5zaG91bGQuYmUuYSgnbnVtYmVyJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJy5yZXNldCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgcmVzZXQgYXMgVzNDIGlmIHRoZSBvcmlnaW5hbCBzZXNzaW9uIHdhcyBXM0MnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGNhcHMgPSB7XG4gICAgICAgICAgYWx3YXlzTWF0Y2g6IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICAgICdhcHBpdW06YXBwJzogJ0Zha2UnLFxuICAgICAgICAgICAgJ2FwcGl1bTpkZXZpY2VOYW1lJzogJ0Zha2UnLFxuICAgICAgICAgICAgJ2FwcGl1bTphdXRvbWF0aW9uTmFtZSc6ICdGYWtlJyxcbiAgICAgICAgICAgIHBsYXRmb3JtTmFtZTogJ0Zha2UnLFxuICAgICAgICAgIH0sIGRlZmF1bHRDYXBzKSxcbiAgICAgICAgICBmaXJzdE1hdGNoOiBbe31dLFxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24odW5kZWZpbmVkLCB1bmRlZmluZWQsIGNhcHMpO1xuICAgICAgICBkLnByb3RvY29sLnNob3VsZC5lcXVhbCgnVzNDJyk7XG4gICAgICAgIGF3YWl0IGQucmVzZXQoKTtcbiAgICAgICAgZC5wcm90b2NvbC5zaG91bGQuZXF1YWwoJ1czQycpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEZXZpY2VTZXR0aW5ncycsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIG5vdCBob2xkIG9uIHRvIHJlZmVyZW5jZSBvZiBkZWZhdWx0cyBpbiBjb25zdHJ1Y3RvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBvYmogPSB7Zm9vOiAnYmFyJ307XG4gICAgICBsZXQgZDEgPSBuZXcgRGV2aWNlU2V0dGluZ3Mob2JqKTtcbiAgICAgIGxldCBkMiA9IG5ldyBEZXZpY2VTZXR0aW5ncyhvYmopO1xuICAgICAgZDEuX3NldHRpbmdzLmZvbyA9ICdiYXonO1xuICAgICAgZDEuX3NldHRpbmdzLnNob3VsZC5ub3QuZXFsKGQyLl9zZXR0aW5ncyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCcuaXNGZWF0dXJlRW5hYmxlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBkID0gbmV3IERyaXZlckNsYXNzKCk7XG5cbiAgICBhZnRlckVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgZC5kZW55SW5zZWN1cmUgPSBudWxsO1xuICAgICAgZC5hbGxvd0luc2VjdXJlID0gbnVsbDtcbiAgICAgIGQucmVsYXhlZFNlY3VyaXR5RW5hYmxlZCA9IG51bGw7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNheSBhIGZlYXR1cmUgaXMgZW5hYmxlZCB3aGVuIGl0IGlzIGV4cGxpY2l0bHkgYWxsb3dlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGQuYWxsb3dJbnNlY3VyZSA9IFsnZm9vJywgJ2JhciddO1xuICAgICAgZC5pc0ZlYXR1cmVFbmFibGVkKCdmb28nKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGQuaXNGZWF0dXJlRW5hYmxlZCgnYmFyJykuc2hvdWxkLmJlLnRydWU7XG4gICAgICBkLmlzRmVhdHVyZUVuYWJsZWQoJ2JheicpLnNob3VsZC5iZS5mYWxzZTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2F5IGEgZmVhdHVyZSBpcyBub3QgZW5hYmxlZCBpZiBpdCBpcyBub3QgZW5hYmxlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGQuYWxsb3dJbnNlY3VyZSA9IFtdO1xuICAgICAgZC5pc0ZlYXR1cmVFbmFibGVkKCdmb28nKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByZWZlciBkZW55SW5zZWN1cmUgdG8gYWxsb3dJbnNlY3VyZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGQuYWxsb3dJbnNlY3VyZSA9IFsnZm9vJywgJ2JhciddO1xuICAgICAgZC5kZW55SW5zZWN1cmUgPSBbJ2ZvbyddO1xuICAgICAgZC5pc0ZlYXR1cmVFbmFibGVkKCdmb28nKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgICBkLmlzRmVhdHVyZUVuYWJsZWQoJ2JhcicpLnNob3VsZC5iZS50cnVlO1xuICAgICAgZC5pc0ZlYXR1cmVFbmFibGVkKCdiYXonKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFsbG93IGdsb2JhbCBzZXR0aW5nIGZvciBpbnNlY3VyaXR5JywgZnVuY3Rpb24gKCkge1xuICAgICAgZC5yZWxheGVkU2VjdXJpdHlFbmFibGVkID0gdHJ1ZTtcbiAgICAgIGQuaXNGZWF0dXJlRW5hYmxlZCgnZm9vJykuc2hvdWxkLmJlLnRydWU7XG4gICAgICBkLmlzRmVhdHVyZUVuYWJsZWQoJ2JhcicpLnNob3VsZC5iZS50cnVlO1xuICAgICAgZC5pc0ZlYXR1cmVFbmFibGVkKCdiYXonKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KCdnbG9iYWwgc2V0dGluZyBzaG91bGQgYmUgb3ZlcnJpZGVhYmxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgZC5yZWxheGVkU2VjdXJpdHlFbmFibGVkID0gdHJ1ZTtcbiAgICAgIGQuZGVueUluc2VjdXJlID0gWydmb28nLCAnYmFyJ107XG4gICAgICBkLmlzRmVhdHVyZUVuYWJsZWQoJ2ZvbycpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgIGQuaXNGZWF0dXJlRW5hYmxlZCgnYmFyJykuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgZC5pc0ZlYXR1cmVFbmFibGVkKCdiYXonKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VEcml2ZXJVbml0VGVzdHM7XG4iXX0=