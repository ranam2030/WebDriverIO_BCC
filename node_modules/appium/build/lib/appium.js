"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppiumDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _config = require("./config");

var _drivers = require("./drivers");

var _baseDriver = require("@appium/base-driver");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _utils = require("./utils");

var _support = require("@appium/support");

const desiredCapabilityConstraints = {
  automationName: {
    presence: true,
    isString: true
  },
  platformName: {
    presence: true,
    isString: true
  }
};
const sessionsListGuard = new _asyncLock.default();
const pendingDriversGuard = new _asyncLock.default();

class AppiumDriver extends _baseDriver.BaseDriver {
  constructor(args) {
    if (args.tmpDir) {
      process.env.APPIUM_TMP_DIR = args.tmpDir;
    }

    super(args);
    this.desiredCapConstraints = desiredCapabilityConstraints;
    this.newCommandTimeoutMs = 0;
    this.args = Object.assign({}, args);
    this.sessions = {};
    this.pendingDrivers = {};
    this.pluginClasses = [];
    this.sessionPlugins = {};
    this.sessionlessPlugins = [];
    (0, _config.updateBuildInfo)();
  }

  get isCommandsQueueEnabled() {
    return false;
  }

  sessionExists(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.sessionId !== null;
  }

  driverForSession(sessionId) {
    return this.sessions[sessionId];
  }

  async getStatus() {
    return {
      build: _lodash.default.clone((0, _config.getBuildInfo)())
    };
  }

  async getSessions() {
    const sessions = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions);
    return _lodash.default.toPairs(sessions).map(([id, driver]) => ({
      id,
      capabilities: driver.caps
    }));
  }

  printNewSessionAnnouncement(driverName, driverVersion, driverBaseVersion) {
    _logger.default.info(driverVersion ? `Appium v${_config.APPIUM_VER} creating new ${driverName} (v${driverVersion}) session` : `Appium v${_config.APPIUM_VER} creating new ${driverName} session`);

    _logger.default.info(`Checking BaseDriver versions for Appium and ${driverName}`);

    _logger.default.info(AppiumDriver.baseVersion ? `Appium's BaseDriver version is ${AppiumDriver.baseVersion}` : `Could not determine Appium's BaseDriver version`);

    _logger.default.info(driverBaseVersion ? `${driverName}'s BaseDriver version is ${driverBaseVersion}` : `Could not determine ${driverName}'s BaseDriver version`);
  }

  _findMatchingDriver(...args) {
    return (0, _drivers.findMatchingDriver)(...args);
  }

  assignCliArgsToExtension(extType, extName, extClass, extInstance) {
    const cliArgs = (0, _utils.getExtensionArgs)(this.args[`${extType}Args`], extName);

    if (!_lodash.default.isEmpty(cliArgs)) {
      if (!_lodash.default.has(extClass, 'argsConstraints')) {
        throw new Error(`You sent in CLI args for the ${extName} ${extType}, but it ` + `does not define any`);
      }

      (0, _utils.validateExtensionArgs)(cliArgs, extClass.argsConstraints);
      extInstance.cliArgs = cliArgs;

      _logger.default.debug(`Set CLI arguments on ${extName} ${extType} instance: ${JSON.stringify(cliArgs)}`);
    }
  }

  async createSession(jsonwpCaps, reqCaps, w3cCapabilities) {
    const defaultCapabilities = _lodash.default.cloneDeep(this.args.defaultCapabilities);

    const defaultSettings = (0, _utils.pullSettings)(defaultCapabilities);
    jsonwpCaps = _lodash.default.cloneDeep(jsonwpCaps);
    const jwpSettings = Object.assign({}, defaultSettings, (0, _utils.pullSettings)(jsonwpCaps));
    w3cCapabilities = _lodash.default.cloneDeep(w3cCapabilities);
    const w3cSettings = Object.assign({}, jwpSettings);
    Object.assign(w3cSettings, (0, _utils.pullSettings)((w3cCapabilities || {}).alwaysMatch || {}));

    for (const firstMatchEntry of (w3cCapabilities || {}).firstMatch || []) {
      Object.assign(w3cSettings, (0, _utils.pullSettings)(firstMatchEntry));
    }

    let protocol;
    let innerSessionId, dCaps;

    try {
      const parsedCaps = (0, _utils.parseCapsForInnerDriver)(jsonwpCaps, w3cCapabilities, this.desiredCapConstraints, defaultCapabilities);
      const {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities,
        error
      } = parsedCaps;
      protocol = parsedCaps.protocol;

      if (error) {
        throw error;
      }

      const {
        driver: InnerDriver,
        version: driverVersion,
        driverName
      } = this._findMatchingDriver(this.driverConfig, desiredCaps);

      this.printNewSessionAnnouncement(InnerDriver.name, driverVersion, InnerDriver.baseVersion);

      if (this.args.sessionOverride) {
        await this.deleteAllSessions();
      }

      let runningDriversData, otherPendingDriversData;
      const driverInstance = new InnerDriver(this.args, true);

      if (this.args.relaxedSecurityEnabled) {
        _logger.default.info(`Applying relaxed security to '${InnerDriver.name}' as per ` + `server command line argument. All insecure features will be ` + `enabled unless explicitly disabled by --deny-insecure`);

        driverInstance.relaxedSecurityEnabled = true;
      }

      if (!_lodash.default.isEmpty(this.args.denyInsecure)) {
        _logger.default.info('Explicitly preventing use of insecure features:');

        this.args.denyInsecure.map(a => _logger.default.info(`    ${a}`));
        driverInstance.denyInsecure = this.args.denyInsecure;
      }

      if (!_lodash.default.isEmpty(this.args.allowInsecure)) {
        _logger.default.info('Explicitly enabling use of insecure features:');

        this.args.allowInsecure.map(a => _logger.default.info(`    ${a}`));
        driverInstance.allowInsecure = this.args.allowInsecure;
      }

      this.assignCliArgsToExtension('driver', driverName, InnerDriver, driverInstance);
      driverInstance.server = this.server;

      try {
        runningDriversData = await this.curSessionDataForDriver(InnerDriver);
      } catch (e) {
        throw new _baseDriver.errors.SessionNotCreatedError(e.message);
      }

      await pendingDriversGuard.acquire(AppiumDriver.name, () => {
        this.pendingDrivers[InnerDriver.name] = this.pendingDrivers[InnerDriver.name] || [];
        otherPendingDriversData = this.pendingDrivers[InnerDriver.name].map(drv => drv.driverData);
        this.pendingDrivers[InnerDriver.name].push(driverInstance);
      });

      try {
        [innerSessionId, dCaps] = await driverInstance.createSession(processedJsonwpCapabilities, reqCaps, processedW3CCapabilities, [...runningDriversData, ...otherPendingDriversData]);
        protocol = driverInstance.protocol;
        await sessionsListGuard.acquire(AppiumDriver.name, () => {
          this.sessions[innerSessionId] = driverInstance;
        });
      } finally {
        await pendingDriversGuard.acquire(AppiumDriver.name, () => {
          _lodash.default.pull(this.pendingDrivers[InnerDriver.name], driverInstance);
        });
      }

      this.attachUnexpectedShutdownHandler(driverInstance, innerSessionId);

      _logger.default.info(`New ${InnerDriver.name} session created successfully, session ` + `${innerSessionId} added to master session list`);

      driverInstance.startNewCommandTimeout();

      if (driverInstance.isW3CProtocol() && !_lodash.default.isEmpty(w3cSettings)) {
        _logger.default.info(`Applying the initial values to Appium settings parsed from W3C caps: ` + JSON.stringify(w3cSettings));

        await driverInstance.updateSettings(w3cSettings);
      } else if (driverInstance.isMjsonwpProtocol() && !_lodash.default.isEmpty(jwpSettings)) {
        _logger.default.info(`Applying the initial values to Appium settings parsed from MJSONWP caps: ` + JSON.stringify(jwpSettings));

        await driverInstance.updateSettings(jwpSettings);
      }
    } catch (error) {
      return {
        protocol,
        error
      };
    }

    return {
      protocol,
      value: [innerSessionId, dCaps, protocol]
    };
  }

  attachUnexpectedShutdownHandler(driver, innerSessionId) {
    const removeSessionFromMasterList = (cause = new Error('Unknown error')) => {
      _logger.default.warn(`Closing session, cause was '${cause.message}'`);

      _logger.default.info(`Removing session '${innerSessionId}' from our master session list`);

      delete this.sessions[innerSessionId];
      delete this.sessionPlugins[innerSessionId];
    };

    if (_lodash.default.isFunction((driver.onUnexpectedShutdown || {}).then)) {
      driver.onUnexpectedShutdown.then(() => {
        throw new Error('Unexpected shutdown');
      }).catch(e => {
        if (!(e instanceof _bluebird.default.CancellationError)) {
          removeSessionFromMasterList(e);
        }
      });
    } else if (_lodash.default.isFunction(driver.onUnexpectedShutdown)) {
      driver.onUnexpectedShutdown(removeSessionFromMasterList);
    } else {
      _logger.default.warn(`Failed to attach the unexpected shutdown listener. ` + `Is 'onUnexpectedShutdown' method available for '${driver.constructor.name}'?`);
    }
  }

  async curSessionDataForDriver(InnerDriver) {
    const sessions = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions);

    const data = _lodash.default.values(sessions).filter(s => s.constructor.name === InnerDriver.name).map(s => s.driverData);

    for (let datum of data) {
      if (!datum) {
        throw new Error(`Problem getting session data for driver type ` + `${InnerDriver.name}; does it implement 'get ` + `driverData'?`);
      }
    }

    return data;
  }

  async deleteSession(sessionId) {
    let protocol;

    try {
      let otherSessionsData = null;
      let dstSession = null;
      await sessionsListGuard.acquire(AppiumDriver.name, () => {
        if (!this.sessions[sessionId]) {
          return;
        }

        const curConstructorName = this.sessions[sessionId].constructor.name;
        otherSessionsData = _lodash.default.toPairs(this.sessions).filter(([key, value]) => value.constructor.name === curConstructorName && key !== sessionId).map(([, value]) => value.driverData);
        dstSession = this.sessions[sessionId];
        protocol = dstSession.protocol;

        _logger.default.info(`Removing session ${sessionId} from our master session list`);

        delete this.sessions[sessionId];
        delete this.sessionPlugins[sessionId];
      });
      return {
        protocol,
        value: await dstSession.deleteSession(sessionId, otherSessionsData)
      };
    } catch (e) {
      _logger.default.error(`Had trouble ending session ${sessionId}: ${e.message}`);

      return {
        protocol,
        error: e
      };
    }
  }

  async deleteAllSessions(opts = {}) {
    const sessionsCount = _lodash.default.size(this.sessions);

    if (0 === sessionsCount) {
      _logger.default.debug('There are no active sessions for cleanup');

      return;
    }

    const {
      force = false,
      reason
    } = opts;

    _logger.default.debug(`Cleaning up ${_support.util.pluralize('active session', sessionsCount, true)}`);

    const cleanupPromises = force ? _lodash.default.values(this.sessions).map(drv => drv.startUnexpectedShutdown(reason && new Error(reason))) : _lodash.default.keys(this.sessions).map(id => this.deleteSession(id));

    for (const cleanupPromise of cleanupPromises) {
      try {
        await cleanupPromise;
      } catch (e) {
        _logger.default.debug(e);
      }
    }
  }

  pluginsForSession(sessionId = null) {
    let plugins = [];

    if (sessionId) {
      if (!this.sessionPlugins[sessionId]) {
        this.sessionPlugins[sessionId] = this.createPluginInstances();
      }

      plugins = this.sessionPlugins[sessionId];
    } else {
      if (_lodash.default.isEmpty(this.sessionlessPlugins)) {
        this.sessionlessPlugins = this.createPluginInstances();
      }

      plugins = this.sessionlessPlugins;
    }

    return plugins;
  }

  pluginsToHandleCmd(cmd, sessionId = null) {
    return this.pluginsForSession(sessionId).filter(p => _lodash.default.isFunction(p[cmd]) || _lodash.default.isFunction(p.handle));
  }

  createPluginInstances(sessionId) {
    if (!sessionId) {
      sessionId = 'sessionless';
    }

    sessionId = _lodash.default.truncate(sessionId, {
      length: 11
    });
    return this.pluginClasses.map(PluginClass => {
      const generalName = PluginClass.pluginName;
      const name = `${generalName} (${sessionId})`;
      const plugin = new PluginClass(name);
      this.assignCliArgsToExtension('plugin', generalName, PluginClass, plugin);
      return plugin;
    });
  }

  async executeCommand(cmd, ...args) {
    const isGetStatus = cmd === 'getStatus';
    const isUmbrellaCmd = !isGetStatus && isAppiumDriverCommand(cmd);
    const isSessionCmd = !isGetStatus && !isUmbrellaCmd;
    let sessionId = null;
    let dstSession = null;
    let protocol = null;
    let driver = this;

    if (isSessionCmd) {
      sessionId = _lodash.default.last(args);
      dstSession = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions[sessionId]);

      if (!dstSession) {
        throw new Error(`The session with id '${sessionId}' does not exist`);
      }

      protocol = dstSession.protocol;
      driver = dstSession;
    }

    const plugins = this.pluginsToHandleCmd(cmd, sessionId);
    const cmdHandledBy = {
      default: false
    };

    const defaultBehavior = async () => {
      plugins.length && _logger.default.info(`Executing default handling behavior for command '${cmd}'`);
      cmdHandledBy.default = true;

      if (isGetStatus) {
        return await this.getStatus();
      }

      if (isUmbrellaCmd) {
        return await super.executeCommand(cmd, ...args);
      }

      return await dstSession.executeCommand(cmd, ...args);
    };

    const wrappedCmd = this.wrapCommandWithPlugins({
      driver,
      cmd,
      args,
      plugins,
      cmdHandledBy,
      next: defaultBehavior
    });
    const res = await this.executeWrappedCommand({
      wrappedCmd,
      protocol
    });
    plugins.length && this.logPluginHandlerReport({
      cmd,
      cmdHandledBy
    });
    return res;
  }

  wrapCommandWithPlugins({
    driver,
    cmd,
    args,
    next,
    cmdHandledBy,
    plugins
  }) {
    plugins.length && _logger.default.info(`Plugins which can handle cmd '${cmd}': ${plugins.map(p => p.name)}`);

    for (const plugin of plugins) {
      cmdHandledBy[plugin.name] = false;

      next = (_next => async () => {
        _logger.default.info(`Plugin ${plugin.name} is now handling cmd '${cmd}'`);

        cmdHandledBy[plugin.name] = true;

        if (plugin[cmd]) {
          return await plugin[cmd](_next, driver, ...args);
        }

        return await plugin.handle(_next, driver, cmd, ...args);
      })(next);
    }

    return next;
  }

  logPluginHandlerReport({
    cmd,
    cmdHandledBy
  }) {
    const didHandle = Object.keys(cmdHandledBy).filter(k => cmdHandledBy[k]);
    const didntHandle = Object.keys(cmdHandledBy).filter(k => !cmdHandledBy[k]);

    if (didntHandle.length > 0) {
      _logger.default.info(`Command '${cmd}' was not handled by the following beahviors or plugins, even ` + `though they were registered to handle it: ${JSON.stringify(didntHandle)}. The ` + `command *was* handled by these: ${JSON.stringify(didHandle)}.`);
    }
  }

  async executeWrappedCommand({
    wrappedCmd,
    protocol
  }) {
    let cmdRes,
        cmdErr,
        res = {};

    try {
      cmdRes = await wrappedCmd();
    } catch (e) {
      cmdErr = e;
    }

    if (_lodash.default.isPlainObject(cmdRes) && _lodash.default.has(cmdRes, 'protocol')) {
      res = cmdRes;
    } else {
      res.value = cmdRes;
      res.error = cmdErr;
      res.protocol = protocol;
    }

    return res;
  }

  proxyRouteIsAvoided(sessionId, method, url, body) {
    if (super.proxyRouteIsAvoided(sessionId, method, url, body)) {
      return true;
    }

    for (const plugin of this.pluginsForSession(sessionId)) {
      var _plugin$shouldAvoidPr;

      if ((_plugin$shouldAvoidPr = plugin.shouldAvoidProxy) !== null && _plugin$shouldAvoidPr !== void 0 && _plugin$shouldAvoidPr.call(plugin, method, url, body)) {
        _logger.default.info(`Request to ${url} would normally be proxied, but plugin ${plugin.name} wants ` + `to handle it internally. We'll avoid proxying in this case.`);

        return true;
      }
    }

    return false;
  }

  proxyActive(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && _lodash.default.isFunction(dstSession.proxyActive) && dstSession.proxyActive(sessionId);
  }

  getProxyAvoidList(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession ? dstSession.getProxyAvoidList() : [];
  }

  canProxy(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.canProxy(sessionId);
  }

}

exports.AppiumDriver = AppiumDriver;

function isAppiumDriverCommand(cmd) {
  return !(0, _baseDriver.isSessionCommand)(cmd) || cmd === 'deleteSession';
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
