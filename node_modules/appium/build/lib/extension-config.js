"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PLUGIN_TYPE = exports.INSTALL_TYPE_NPM = exports.INSTALL_TYPE_LOCAL = exports.INSTALL_TYPE_GITHUB = exports.INSTALL_TYPE_GIT = exports.INSTALL_TYPES = exports.DRIVER_TYPE = exports.DEFAULT_APPIUM_HOME = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _support = require("@appium/support");

var _path = _interopRequireDefault(require("path"));

var _os = _interopRequireDefault(require("os"));

var _yaml = _interopRequireDefault(require("yaml"));

const DRIVER_TYPE = 'driver';
exports.DRIVER_TYPE = DRIVER_TYPE;
const PLUGIN_TYPE = 'plugin';
exports.PLUGIN_TYPE = PLUGIN_TYPE;

const DEFAULT_APPIUM_HOME = _path.default.resolve(_os.default.homedir(), '.appium');

exports.DEFAULT_APPIUM_HOME = DEFAULT_APPIUM_HOME;
const CONFIG_FILE_NAME = 'extensions.yaml';
const CONFIG_SCHEMA_REV = 2;
const INSTALL_TYPE_NPM = 'npm';
exports.INSTALL_TYPE_NPM = INSTALL_TYPE_NPM;
const INSTALL_TYPE_LOCAL = 'local';
exports.INSTALL_TYPE_LOCAL = INSTALL_TYPE_LOCAL;
const INSTALL_TYPE_GITHUB = 'github';
exports.INSTALL_TYPE_GITHUB = INSTALL_TYPE_GITHUB;
const INSTALL_TYPE_GIT = 'git';
exports.INSTALL_TYPE_GIT = INSTALL_TYPE_GIT;
const INSTALL_TYPES = [INSTALL_TYPE_GIT, INSTALL_TYPE_GITHUB, INSTALL_TYPE_LOCAL, INSTALL_TYPE_NPM];
exports.INSTALL_TYPES = INSTALL_TYPES;

class ExtensionConfig {
  constructor(appiumHome, extensionType, logFn = null) {
    if (logFn === null) {
      logFn = _logger.default.error.bind(_logger.default);
    }

    this.appiumHome = appiumHome;
    this.configFile = _path.default.resolve(this.appiumHome, CONFIG_FILE_NAME);
    this.installedExtensions = {};
    this.extensionType = extensionType;
    this.configKey = `${extensionType}s`;
    this.yamlData = {
      [`${DRIVER_TYPE}s`]: {},
      [`${PLUGIN_TYPE}s`]: {}
    };
    this.log = logFn;
  }

  validate(exts) {
    const foundProblems = {};

    for (const [extName, extData] of _lodash.default.toPairs(exts)) {
      foundProblems[extName] = [...this.getGenericConfigProblems(extData), ...this.getConfigProblems(extData)];
    }

    const problemSummaries = [];

    for (const [extName, problems] of _lodash.default.toPairs(foundProblems)) {
      if (_lodash.default.isEmpty(problems)) {
        continue;
      }

      delete exts[extName];
      problemSummaries.push(`${this.extensionType} ${extName} had errors and will not ` + `be available. Errors:`);

      for (const problem of problems) {
        problemSummaries.push(`  - ${problem.err} (Actual value: ` + `${JSON.stringify(problem.val)})`);
      }
    }

    if (!_lodash.default.isEmpty(problemSummaries)) {
      this.log(`Appium encountered one or more errors while validating ` + `the ${this.configKey} extension file (${this.configFile}):`);

      for (const summary of problemSummaries) {
        this.log(summary);
      }
    }

    return exts;
  }

  getGenericConfigProblems(ext) {
    const {
      version,
      pkgName,
      installSpec,
      installType,
      installPath,
      mainClass
    } = ext;
    const problems = [];

    if (!_lodash.default.isString(version)) {
      problems.push({
        err: 'Missing or incorrect version',
        val: version
      });
    }

    if (!_lodash.default.isString(pkgName)) {
      problems.push({
        err: 'Missing or incorrect NPM package name',
        val: pkgName
      });
    }

    if (!_lodash.default.isString(installSpec)) {
      problems.push({
        err: 'Missing or incorrect installation spec',
        val: installSpec
      });
    }

    if (!_lodash.default.includes(INSTALL_TYPES, installType)) {
      problems.push({
        err: 'Missing or incorrect install type',
        val: installType
      });
    }

    if (!_lodash.default.isString(installPath)) {
      problems.push({
        err: 'Missing or incorrect installation path',
        val: installPath
      });
    }

    if (!_lodash.default.isString(mainClass)) {
      problems.push({
        err: 'Missing or incorrect driver class name',
        val: mainClass
      });
    }

    return problems;
  }

  getConfigProblems() {
    return [];
  }

  applySchemaMigrations() {
    if (this.yamlData.schemaRev < 2 && _lodash.default.isUndefined(this.yamlData[PLUGIN_TYPE])) {
      this.yamlData[PLUGIN_TYPE] = {};
    }
  }

  async read() {
    await (0, _support.mkdirp)(this.appiumHome);

    try {
      this.yamlData = _yaml.default.parse(await _support.fs.readFile(this.configFile, 'utf8'));
      this.applySchemaMigrations();
      this.installedExtensions = this.validate(this.yamlData[this.configKey]);
    } catch (err) {
      if (await _support.fs.exists(this.configFile)) {
        throw new Error(`Appium had trouble loading the extension installation ` + `cache file (${this.configFile}). Ensure it exists and is ` + `readable. Specific error: ${err.message}`);
      }

      try {
        await this.write();
      } catch {
        throw new Error(`Appium could not read or write from the Appium Home directory ` + `(${this.appiumHome}). Please ensure it is writable.`);
      }
    }

    return this.installedExtensions;
  }

  async write() {
    const newYamlData = { ...this.yamlData,
      schemaRev: CONFIG_SCHEMA_REV,
      [this.configKey]: this.installedExtensions
    };
    await _support.fs.writeFile(this.configFile, _yaml.default.stringify(newYamlData), 'utf8');
  }

  async addExtension(extName, extData) {
    this.installedExtensions[extName] = extData;
    await this.write();
  }

  async updateExtension(extName, extData) {
    this.installedExtensions[extName] = { ...this.installedExtensions[extName],
      ...extData
    };
    await this.write();
  }

  async removeExtension(extName) {
    delete this.installedExtensions[extName];
    await this.write();
  }

  print() {
    const extNames = Object.keys(this.installedExtensions);

    if (_lodash.default.isEmpty(extNames)) {
      _logger.default.info(`No ${this.configKey} have been installed. Use the "appium ${this.extensionType}" ` + 'command to install the one(s) you want to use.');

      return;
    }

    _logger.default.info(`Available ${this.configKey}:`);

    for (const [extName, extData] of _lodash.default.toPairs(this.installedExtensions)) {
      _logger.default.info(`  - ${this.extensionDesc(extName, extData)}`);
    }
  }

  extensionDesc() {
    throw new Error('This must be implemented in a final class');
  }

  getExtensionRequirePath(extName) {
    const {
      pkgName,
      installPath
    } = this.installedExtensions[extName];
    return _path.default.resolve(this.appiumHome, installPath, 'node_modules', pkgName);
  }

  getInstallPath(extName) {
    const {
      installPath
    } = this.installedExtensions[extName];
    return _path.default.resolve(this.appiumHome, installPath);
  }

  require(extName) {
    const {
      mainClass
    } = this.installedExtensions[extName];
    const reqPath = this.getExtensionRequirePath(extName);

    const reqResolved = require.resolve(reqPath);

    if (process.env.APPIUM_RELOAD_EXTENSIONS && require.cache[reqResolved]) {
      _logger.default.debug(`Removing ${reqResolved} from require cache`);

      delete require.cache[reqResolved];
    }

    return require(reqPath)[mainClass];
  }

  isInstalled(extName) {
    return _lodash.default.includes(Object.keys(this.installedExtensions), extName);
  }

}

exports.default = ExtensionConfig;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
