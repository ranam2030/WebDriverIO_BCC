#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = main;

require("source-map-support/register");

var _logsink = require("./logsink");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

var _asyncbox = require("asyncbox");

var _parser = _interopRequireWildcard(require("./cli/parser"));

var _args = require("./cli/args");

var _support = require("@appium/support");

var _config = require("./config");

var _driverConfig = _interopRequireDefault(require("./driver-config"));

var _pluginConfig = _interopRequireDefault(require("./plugin-config"));

var _extensionConfig = require("./extension-config");

var _extension = require("./cli/extension");

var _appium = require("./appium");

var _gridRegister = _interopRequireDefault(require("./grid-register"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function preflightChecks({
  parser,
  args,
  driverConfig,
  pluginConfig,
  throwInsteadOfExit = false
}) {
  try {
    (0, _config.checkNodeOk)();

    if (args.longStacktrace) {
      require('longjohn').async_trace_limit = -1;
    }

    if (args.showConfig) {
      await (0, _config.showConfig)();
      process.exit(0);
    }

    (0, _config.warnNodeDeprecations)();
    (0, _config.validateServerArgs)(parser, args);
    await driverConfig.read();
    await pluginConfig.read();

    if (args.tmpDir) {
      await (0, _config.validateTmpDir)(args.tmpDir);
    }
  } catch (err) {
    _logger.default.error(err.message.red);

    if (throwInsteadOfExit) {
      throw err;
    }

    process.exit(1);
  }
}

function logNonDefaultArgsWarning(args) {
  _logger.default.info('Non-default server args:');

  (0, _utils.inspectObject)(args);
}

function logDefaultCapabilitiesWarning(caps) {
  _logger.default.info('Default capabilities, which will be added to each request ' + 'unless overridden by desired capabilities:');

  (0, _utils.inspectObject)(caps);
}

async function logStartupInfo(parser, args) {
  let welcome = `Welcome to Appium v${_config.APPIUM_VER}`;
  let appiumRev = await (0, _config.getGitRev)();

  if (appiumRev) {
    welcome += ` (REV ${appiumRev})`;
  }

  _logger.default.info(welcome);

  let showArgs = (0, _config.getNonDefaultArgs)(parser, args);

  if (_lodash.default.size(showArgs)) {
    logNonDefaultArgsWarning(showArgs);
  }

  if (!_lodash.default.isEmpty(args.defaultCapabilities)) {
    logDefaultCapabilitiesWarning(args.defaultCapabilities);
  }
}

function logServerPort(address, port) {
  let logMessage = `Appium REST http interface listener started on ` + `${address}:${port}`;

  _logger.default.info(logMessage);
}

function getActivePlugins(args, pluginConfig) {
  return Object.keys(pluginConfig.installedExtensions).filter(pluginName => _lodash.default.includes(args.plugins, pluginName) || args.plugins.length === 1 && args.plugins[0] === _args.USE_ALL_PLUGINS).map(pluginName => {
    try {
      _logger.default.info(`Attempting to load plugin ${pluginName}...`);

      const PluginClass = pluginConfig.require(pluginName);

      PluginClass.pluginName = pluginName;
      return PluginClass;
    } catch (err) {
      _logger.default.error(`Could not load plugin '${pluginName}', so it will not be available. Error ` + `in loading the plugin was: ${err.message}`);

      _logger.default.debug(err.stack);

      return false;
    }
  }).filter(Boolean);
}

function getActiveDrivers(args, driverConfig) {
  return Object.keys(driverConfig.installedExtensions).filter(driverName => _lodash.default.includes(args.drivers, driverName) || args.drivers.length === 0).map(driverName => {
    try {
      _logger.default.info(`Attempting to load driver ${driverName}...`);

      return driverConfig.require(driverName);
    } catch (err) {
      _logger.default.error(`Could not load driver '${driverName}', so it will not be available. Error ` + `in loading the driver was: ${err.message}`);

      _logger.default.debug(err.stack);

      return false;
    }
  }).filter(Boolean);
}

function getServerUpdaters(driverClasses, pluginClasses) {
  return [...driverClasses, ...pluginClasses].map(klass => klass.updateServer).filter(Boolean);
}

function getExtraMethodMap(driverClasses, pluginClasses) {
  return [...driverClasses, ...pluginClasses].reduce((map, klass) => ({ ...map,
    ...klass.newMethodMap
  }), {});
}

async function main(args = null) {
  let parser = (0, _parser.default)();
  let throwInsteadOfExit = false;

  if (args) {
    args = Object.assign({}, (0, _parser.getDefaultServerArgs)(), args);

    if (args.throwInsteadOfExit) {
      throwInsteadOfExit = true;
      delete args.throwInsteadOfExit;
    }
  } else {
    args = parser.parse_args();
  }

  await (0, _logsink.init)(args);

  if (args.subcommand === _extensionConfig.DRIVER_TYPE || args.subcommand === _extensionConfig.PLUGIN_TYPE) {
    await (0, _extension.runExtensionCommand)(args, args.subcommand);
    process.exit();
  }

  if (args.logFilters) {
    const {
      issues,
      rules
    } = await _support.logger.loadSecureValuesPreprocessingRules(args.logFilters);

    if (!_lodash.default.isEmpty(issues)) {
      throw new Error(`The log filtering rules config '${args.logFilters}' has issues: ` + JSON.stringify(issues, null, 2));
    }

    if (_lodash.default.isEmpty(rules)) {
      _logger.default.warn(`Found no log filtering rules in '${args.logFilters}'. Is that expected?`);
    } else {
      _logger.default.info(`Loaded ${_support.util.pluralize('filtering rule', rules.length, true)} from '${args.logFilters}'`);
    }
  }

  let appiumDriver = new _appium.AppiumDriver(args);
  const driverConfig = new _driverConfig.default(args.appiumHome);
  appiumDriver.driverConfig = driverConfig;
  const pluginConfig = new _pluginConfig.default(args.appiumHome);
  await preflightChecks({
    parser,
    args,
    driverConfig,
    pluginConfig,
    throwInsteadOfExit
  });
  const pluginClasses = getActivePlugins(args, pluginConfig);
  appiumDriver.pluginClasses = pluginClasses;
  await logStartupInfo(parser, args);
  let routeConfiguringFunction = (0, _baseDriver.routeConfiguringFunction)(appiumDriver);
  const driverClasses = getActiveDrivers(args, driverConfig);
  const serverUpdaters = getServerUpdaters(driverClasses, pluginClasses);
  const extraMethodMap = getExtraMethodMap(driverClasses, pluginClasses);
  const serverOpts = {
    routeConfiguringFunction,
    port: args.port,
    hostname: args.address,
    allowCors: args.allowCors,
    basePath: args.basePath,
    serverUpdaters,
    extraMethodMap
  };

  if (args.keepAliveTimeout) {
    serverOpts.keepAliveTimeout = args.keepAliveTimeout * 1000;
  }

  let server;

  try {
    server = await (0, _baseDriver.server)(serverOpts);
  } catch (err) {
    _logger.default.error(`Could not configure Appium server. It's possible that a driver or plugin tried ` + `to update the server and failed. Original error: ${err.message}`);

    _logger.default.debug(err.stack);

    return process.exit(1);
  }

  if (args.allowCors) {
    _logger.default.warn('You have enabled CORS requests from any host. Be careful not ' + 'to visit sites which could maliciously try to start Appium ' + 'sessions on your machine');
  }

  appiumDriver.server = server;

  try {
    if (args.nodeconfig !== null) {
      await (0, _gridRegister.default)(args.nodeconfig, args.address, args.port, args.basePath);
    }
  } catch (err) {
    await server.close();
    throw err;
  }

  for (const signal of ['SIGINT', 'SIGTERM']) {
    process.once(signal, async function onSignal() {
      _logger.default.info(`Received ${signal} - shutting down`);

      try {
        await appiumDriver.deleteAllSessions({
          force: true,
          reason: `The process has received ${signal} signal`
        });
        await server.close();
        process.exit(0);
      } catch (e) {
        _logger.default.warn(e);

        process.exit(1);
      }
    });
  }

  logServerPort(args.address, args.port);
  driverConfig.print();
  pluginConfig.print(pluginClasses.map(p => p.pluginName));
  return server;
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(main);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
