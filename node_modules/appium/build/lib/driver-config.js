"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _extensionConfig = _interopRequireWildcard(require("./extension-config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class DriverConfig extends _extensionConfig.default {
  constructor(appiumHome, logFn = null) {
    super(appiumHome, _extensionConfig.DRIVER_TYPE, logFn);
  }

  getConfigProblems(driver) {
    const problems = [];
    const automationNames = [];
    const {
      platformNames,
      automationName
    } = driver;

    if (!_lodash.default.isArray(platformNames)) {
      problems.push({
        err: 'Missing or incorrect supported platformName list.',
        val: platformNames
      });
    } else {
      for (const pName of platformNames) {
        if (!_lodash.default.isString(pName)) {
          problems.push({
            err: 'Incorrectly formatted platformName.',
            val: pName
          });
        }
      }
    }

    if (!_lodash.default.isString(automationName)) {
      problems.push({
        err: 'Missing or incorrect automationName',
        val: automationName
      });
    }

    if (_lodash.default.includes(automationNames, automationName)) {
      problems.push({
        err: 'Multiple drivers claim support for the same automationName',
        val: automationName
      });
    }

    automationNames.push(automationName);
    return problems;
  }

  extensionDesc(driverName, {
    version,
    automationName
  }) {
    return `${driverName}@${version} (automationName '${automationName}')`;
  }

}

exports.default = DriverConfig;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXItY29uZmlnLmpzIl0sIm5hbWVzIjpbIkRyaXZlckNvbmZpZyIsIkV4dGVuc2lvbkNvbmZpZyIsImNvbnN0cnVjdG9yIiwiYXBwaXVtSG9tZSIsImxvZ0ZuIiwiRFJJVkVSX1RZUEUiLCJnZXRDb25maWdQcm9ibGVtcyIsImRyaXZlciIsInByb2JsZW1zIiwiYXV0b21hdGlvbk5hbWVzIiwicGxhdGZvcm1OYW1lcyIsImF1dG9tYXRpb25OYW1lIiwiXyIsImlzQXJyYXkiLCJwdXNoIiwiZXJyIiwidmFsIiwicE5hbWUiLCJpc1N0cmluZyIsImluY2x1ZGVzIiwiZXh0ZW5zaW9uRGVzYyIsImRyaXZlck5hbWUiLCJ2ZXJzaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7QUFFZSxNQUFNQSxZQUFOLFNBQTJCQyx3QkFBM0IsQ0FBMkM7QUFDeERDLEVBQUFBLFdBQVcsQ0FBRUMsVUFBRixFQUFjQyxLQUFLLEdBQUcsSUFBdEIsRUFBNEI7QUFDckMsVUFBTUQsVUFBTixFQUFrQkUsNEJBQWxCLEVBQStCRCxLQUEvQjtBQUNEOztBQUVERSxFQUFBQSxpQkFBaUIsQ0FBRUMsTUFBRixFQUFVO0FBQ3pCLFVBQU1DLFFBQVEsR0FBRyxFQUFqQjtBQUNBLFVBQU1DLGVBQWUsR0FBRyxFQUF4QjtBQUNBLFVBQU07QUFBQ0MsTUFBQUEsYUFBRDtBQUFnQkMsTUFBQUE7QUFBaEIsUUFBa0NKLE1BQXhDOztBQUVBLFFBQUksQ0FBQ0ssZ0JBQUVDLE9BQUYsQ0FBVUgsYUFBVixDQUFMLEVBQStCO0FBQzdCRixNQUFBQSxRQUFRLENBQUNNLElBQVQsQ0FBYztBQUNaQyxRQUFBQSxHQUFHLEVBQUUsbURBRE87QUFFWkMsUUFBQUEsR0FBRyxFQUFFTjtBQUZPLE9BQWQ7QUFJRCxLQUxELE1BS087QUFDTCxXQUFLLE1BQU1PLEtBQVgsSUFBb0JQLGFBQXBCLEVBQW1DO0FBQ2pDLFlBQUksQ0FBQ0UsZ0JBQUVNLFFBQUYsQ0FBV0QsS0FBWCxDQUFMLEVBQXdCO0FBQ3RCVCxVQUFBQSxRQUFRLENBQUNNLElBQVQsQ0FBYztBQUFDQyxZQUFBQSxHQUFHLEVBQUUscUNBQU47QUFBNkNDLFlBQUFBLEdBQUcsRUFBRUM7QUFBbEQsV0FBZDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxRQUFJLENBQUNMLGdCQUFFTSxRQUFGLENBQVdQLGNBQVgsQ0FBTCxFQUFpQztBQUMvQkgsTUFBQUEsUUFBUSxDQUFDTSxJQUFULENBQWM7QUFBQ0MsUUFBQUEsR0FBRyxFQUFFLHFDQUFOO0FBQTZDQyxRQUFBQSxHQUFHLEVBQUVMO0FBQWxELE9BQWQ7QUFDRDs7QUFFRCxRQUFJQyxnQkFBRU8sUUFBRixDQUFXVixlQUFYLEVBQTRCRSxjQUE1QixDQUFKLEVBQWlEO0FBQy9DSCxNQUFBQSxRQUFRLENBQUNNLElBQVQsQ0FBYztBQUNaQyxRQUFBQSxHQUFHLEVBQUUsNERBRE87QUFFWkMsUUFBQUEsR0FBRyxFQUFFTDtBQUZPLE9BQWQ7QUFJRDs7QUFDREYsSUFBQUEsZUFBZSxDQUFDSyxJQUFoQixDQUFxQkgsY0FBckI7QUFFQSxXQUFPSCxRQUFQO0FBQ0Q7O0FBRURZLEVBQUFBLGFBQWEsQ0FBRUMsVUFBRixFQUFjO0FBQUNDLElBQUFBLE9BQUQ7QUFBVVgsSUFBQUE7QUFBVixHQUFkLEVBQXlDO0FBQ3BELFdBQVEsR0FBRVUsVUFBVyxJQUFHQyxPQUFRLHFCQUFvQlgsY0FBZSxJQUFuRTtBQUNEOztBQXhDdUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEV4dGVuc2lvbkNvbmZpZywgeyBEUklWRVJfVFlQRSB9IGZyb20gJy4vZXh0ZW5zaW9uLWNvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyaXZlckNvbmZpZyBleHRlbmRzIEV4dGVuc2lvbkNvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChhcHBpdW1Ib21lLCBsb2dGbiA9IG51bGwpIHtcbiAgICBzdXBlcihhcHBpdW1Ib21lLCBEUklWRVJfVFlQRSwgbG9nRm4pO1xuICB9XG5cbiAgZ2V0Q29uZmlnUHJvYmxlbXMgKGRyaXZlcikge1xuICAgIGNvbnN0IHByb2JsZW1zID0gW107XG4gICAgY29uc3QgYXV0b21hdGlvbk5hbWVzID0gW107XG4gICAgY29uc3Qge3BsYXRmb3JtTmFtZXMsIGF1dG9tYXRpb25OYW1lfSA9IGRyaXZlcjtcblxuICAgIGlmICghXy5pc0FycmF5KHBsYXRmb3JtTmFtZXMpKSB7XG4gICAgICBwcm9ibGVtcy5wdXNoKHtcbiAgICAgICAgZXJyOiAnTWlzc2luZyBvciBpbmNvcnJlY3Qgc3VwcG9ydGVkIHBsYXRmb3JtTmFtZSBsaXN0LicsXG4gICAgICAgIHZhbDogcGxhdGZvcm1OYW1lc1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3QgcE5hbWUgb2YgcGxhdGZvcm1OYW1lcykge1xuICAgICAgICBpZiAoIV8uaXNTdHJpbmcocE5hbWUpKSB7XG4gICAgICAgICAgcHJvYmxlbXMucHVzaCh7ZXJyOiAnSW5jb3JyZWN0bHkgZm9ybWF0dGVkIHBsYXRmb3JtTmFtZS4nLCB2YWw6IHBOYW1lfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIV8uaXNTdHJpbmcoYXV0b21hdGlvbk5hbWUpKSB7XG4gICAgICBwcm9ibGVtcy5wdXNoKHtlcnI6ICdNaXNzaW5nIG9yIGluY29ycmVjdCBhdXRvbWF0aW9uTmFtZScsIHZhbDogYXV0b21hdGlvbk5hbWV9KTtcbiAgICB9XG5cbiAgICBpZiAoXy5pbmNsdWRlcyhhdXRvbWF0aW9uTmFtZXMsIGF1dG9tYXRpb25OYW1lKSkge1xuICAgICAgcHJvYmxlbXMucHVzaCh7XG4gICAgICAgIGVycjogJ011bHRpcGxlIGRyaXZlcnMgY2xhaW0gc3VwcG9ydCBmb3IgdGhlIHNhbWUgYXV0b21hdGlvbk5hbWUnLFxuICAgICAgICB2YWw6IGF1dG9tYXRpb25OYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgYXV0b21hdGlvbk5hbWVzLnB1c2goYXV0b21hdGlvbk5hbWUpO1xuXG4gICAgcmV0dXJuIHByb2JsZW1zO1xuICB9XG5cbiAgZXh0ZW5zaW9uRGVzYyAoZHJpdmVyTmFtZSwge3ZlcnNpb24sIGF1dG9tYXRpb25OYW1lfSkge1xuICAgIHJldHVybiBgJHtkcml2ZXJOYW1lfUAke3ZlcnNpb259IChhdXRvbWF0aW9uTmFtZSAnJHthdXRvbWF0aW9uTmFtZX0nKWA7XG4gIH1cbn1cblxuIl0sImZpbGUiOiJsaWIvZHJpdmVyLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
