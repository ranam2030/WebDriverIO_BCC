"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseDriverNames = parseDriverNames;
exports.parseInstallTypes = parseInstallTypes;
exports.parseJsonStringOrFile = parseJsonStringOrFile;
exports.parsePluginNames = parsePluginNames;
exports.parseSecurityFeatures = parseSecurityFeatures;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("fs"));

var _lodash = _interopRequireDefault(require("lodash"));

var _extensionConfig = require("../extension-config");

function parseSecurityFeatures(features) {
  const splitter = (splitOn, str) => `${str}`.split(splitOn).map(s => s.trim()).filter(Boolean);

  let parsedFeatures;

  try {
    parsedFeatures = splitter(',', features);
  } catch (err) {
    throw new TypeError('Could not parse value of --allow/deny-insecure. Should be ' + 'a list of strings separated by commas, or a path to a file ' + 'listing one feature name per line.');
  }

  if (parsedFeatures.length === 1 && _fs.default.existsSync(parsedFeatures[0])) {
    try {
      const fileFeatures = _fs.default.readFileSync(parsedFeatures[0], 'utf8');

      parsedFeatures = splitter('\n', fileFeatures);
    } catch (err) {
      throw new TypeError(`Attempted to read --allow/deny-insecure feature names ` + `from file ${parsedFeatures[0]} but got error: ${err.message}`);
    }
  }

  return parsedFeatures;
}

function parseDriverNames(names) {
  if (!_lodash.default.isString(names)) {
    throw new TypeError('To parse driver names, names must be a CSV string');
  }

  try {
    return names.split(',').map(s => s.trim()).filter(Boolean);
  } catch (err) {
    throw new TypeError('Could not parse value of --drivers. Should be a list of driver names ' + 'separated by commas. Driver names are those found when running `appium ' + 'driver list`');
  }
}

function parsePluginNames(names) {
  if (!_lodash.default.isString(names)) {
    throw new TypeError('To parse plugin names, names must be a CSV string');
  }

  try {
    return names.split(',').map(s => s.trim()).filter(Boolean);
  } catch (err) {
    throw new TypeError('Could not parse value of --plugins. Should be a list of plugin names ' + 'separated by commas. Plugin names are those found when running `appium ' + 'plugin list`');
  }
}

function parseJsonStringOrFile(capsOrPath) {
  let caps = capsOrPath;
  let loadedFromFile = false;

  try {
    if (_lodash.default.isString(capsOrPath) && _fs.default.statSync(capsOrPath).isFile()) {
      caps = _fs.default.readFileSync(capsOrPath, 'utf8');
      loadedFromFile = true;
    }
  } catch (err) {}

  try {
    const result = JSON.parse(caps);

    if (!_lodash.default.isPlainObject(result)) {
      throw new Error(`'${_lodash.default.truncate(result, {
        length: 100
      })}' is not an object`);
    }

    return result;
  } catch (e) {
    const msg = loadedFromFile ? `The provided value of '${capsOrPath}' must be a valid JSON` : `The provided value must be a valid JSON`;
    throw new TypeError(`${msg}. Original error: ${e.message}`);
  }
}

function parseInstallTypes(source) {
  if (!_lodash.default.includes(_extensionConfig.INSTALL_TYPES, source)) {
    throw `Argument to --source was '${source}', which is not a valid ` + `driver source type. It must be one of ${JSON.stringify(_extensionConfig.INSTALL_TYPES)}`;
  }

  return source;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
