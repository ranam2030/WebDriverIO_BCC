"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runExtensionCommand = runExtensionCommand;

require("source-map-support/register");

var _driverCommand = _interopRequireDefault(require("./driver-command"));

var _pluginCommand = _interopRequireDefault(require("./plugin-command"));

var _driverConfig = _interopRequireDefault(require("../driver-config"));

var _pluginConfig = _interopRequireDefault(require("../plugin-config"));

var _extensionConfig = require("../extension-config");

var _utils = require("./utils");

async function runExtensionCommand(args, type) {
  let jsonResult = null;
  const extCmd = args[`${type}Command`];

  if (!extCmd) {
    throw new TypeError(`Cannot call ${type} command without a subcommand like 'install'`);
  }

  let {
    json,
    suppressOutput,
    appiumHome
  } = args;

  if (suppressOutput) {
    json = true;
  }

  const logFn = msg => (0, _utils.log)(json, msg);

  const ConfigClass = type === _extensionConfig.DRIVER_TYPE ? _driverConfig.default : _pluginConfig.default;
  const CommandClass = type === _extensionConfig.DRIVER_TYPE ? _driverCommand.default : _pluginCommand.default;
  const config = new ConfigClass(appiumHome, logFn);
  const cmd = new CommandClass({
    config,
    json
  });

  try {
    await config.read();
    jsonResult = await cmd.execute(args);
  } catch (err) {
    if (suppressOutput) {
      throw err;
    }

    (0, _utils.errAndQuit)(json, err);
  }

  if (json && !suppressOutput) {
    console.log(JSON.stringify(jsonResult, null, _utils.JSON_SPACES));
  }

  return jsonResult;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jbGkvZXh0ZW5zaW9uLmpzIl0sIm5hbWVzIjpbInJ1bkV4dGVuc2lvbkNvbW1hbmQiLCJhcmdzIiwidHlwZSIsImpzb25SZXN1bHQiLCJleHRDbWQiLCJUeXBlRXJyb3IiLCJqc29uIiwic3VwcHJlc3NPdXRwdXQiLCJhcHBpdW1Ib21lIiwibG9nRm4iLCJtc2ciLCJDb25maWdDbGFzcyIsIkRSSVZFUl9UWVBFIiwiRHJpdmVyQ29uZmlnIiwiUGx1Z2luQ29uZmlnIiwiQ29tbWFuZENsYXNzIiwiRHJpdmVyQ29tbWFuZCIsIlBsdWdpbkNvbW1hbmQiLCJjb25maWciLCJjbWQiLCJyZWFkIiwiZXhlY3V0ZSIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiSlNPTl9TUEFDRVMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBU0EsZUFBZUEsbUJBQWYsQ0FBb0NDLElBQXBDLEVBQTBDQyxJQUExQyxFQUFnRDtBQUc5QyxNQUFJQyxVQUFVLEdBQUcsSUFBakI7QUFDQSxRQUFNQyxNQUFNLEdBQUdILElBQUksQ0FBRSxHQUFFQyxJQUFLLFNBQVQsQ0FBbkI7O0FBQ0EsTUFBSSxDQUFDRSxNQUFMLEVBQWE7QUFDWCxVQUFNLElBQUlDLFNBQUosQ0FBZSxlQUFjSCxJQUFLLDhDQUFsQyxDQUFOO0FBQ0Q7O0FBQ0QsTUFBSTtBQUFDSSxJQUFBQSxJQUFEO0FBQU9DLElBQUFBLGNBQVA7QUFBdUJDLElBQUFBO0FBQXZCLE1BQXFDUCxJQUF6Qzs7QUFDQSxNQUFJTSxjQUFKLEVBQW9CO0FBQ2xCRCxJQUFBQSxJQUFJLEdBQUcsSUFBUDtBQUNEOztBQUNELFFBQU1HLEtBQUssR0FBSUMsR0FBRCxJQUFTLGdCQUFJSixJQUFKLEVBQVVJLEdBQVYsQ0FBdkI7O0FBQ0EsUUFBTUMsV0FBVyxHQUFHVCxJQUFJLEtBQUtVLDRCQUFULEdBQXVCQyxxQkFBdkIsR0FBc0NDLHFCQUExRDtBQUNBLFFBQU1DLFlBQVksR0FBR2IsSUFBSSxLQUFLVSw0QkFBVCxHQUF1Qkksc0JBQXZCLEdBQXVDQyxzQkFBNUQ7QUFDQSxRQUFNQyxNQUFNLEdBQUcsSUFBSVAsV0FBSixDQUFnQkgsVUFBaEIsRUFBNEJDLEtBQTVCLENBQWY7QUFDQSxRQUFNVSxHQUFHLEdBQUcsSUFBSUosWUFBSixDQUFpQjtBQUFDRyxJQUFBQSxNQUFEO0FBQVNaLElBQUFBO0FBQVQsR0FBakIsQ0FBWjs7QUFDQSxNQUFJO0FBQ0YsVUFBTVksTUFBTSxDQUFDRSxJQUFQLEVBQU47QUFDQWpCLElBQUFBLFVBQVUsR0FBRyxNQUFNZ0IsR0FBRyxDQUFDRSxPQUFKLENBQVlwQixJQUFaLENBQW5CO0FBQ0QsR0FIRCxDQUdFLE9BQU9xQixHQUFQLEVBQVk7QUFHWixRQUFJZixjQUFKLEVBQW9CO0FBQ2xCLFlBQU1lLEdBQU47QUFDRDs7QUFDRCwyQkFBV2hCLElBQVgsRUFBaUJnQixHQUFqQjtBQUNEOztBQUVELE1BQUloQixJQUFJLElBQUksQ0FBQ0MsY0FBYixFQUE2QjtBQUMzQmdCLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUFJLENBQUNDLFNBQUwsQ0FBZXZCLFVBQWYsRUFBMkIsSUFBM0IsRUFBaUN3QixrQkFBakMsQ0FBWjtBQUNEOztBQUVELFNBQU94QixVQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5cbmltcG9ydCBEcml2ZXJDb21tYW5kIGZyb20gJy4vZHJpdmVyLWNvbW1hbmQnO1xuaW1wb3J0IFBsdWdpbkNvbW1hbmQgZnJvbSAnLi9wbHVnaW4tY29tbWFuZCc7XG5pbXBvcnQgRHJpdmVyQ29uZmlnIGZyb20gJy4uL2RyaXZlci1jb25maWcnO1xuaW1wb3J0IFBsdWdpbkNvbmZpZyBmcm9tICcuLi9wbHVnaW4tY29uZmlnJztcbmltcG9ydCB7IERSSVZFUl9UWVBFIH0gZnJvbSAnLi4vZXh0ZW5zaW9uLWNvbmZpZyc7XG5pbXBvcnQgeyBlcnJBbmRRdWl0LCBsb2csIEpTT05fU1BBQ0VTIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogUnVuIGEgc3ViY29tbWFuZCBvZiB0aGUgJ2FwcGl1bSBkcml2ZXInIHR5cGUuIEVhY2ggc3ViY29tbWFuZCBoYXMgaXRzIG93biBzZXQgb2YgYXJndW1lbnRzIHdoaWNoXG4gKiBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYSBKUyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBKUyBvYmplY3Qgd2hlcmUgdGhlIGtleSBpcyB0aGUgcGFyYW1ldGVyIG5hbWUgKGFzIGRlZmluZWQgaW5cbiAqIGRyaXZlci1wYXJzZXIuanMpXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJ1bkV4dGVuc2lvbkNvbW1hbmQgKGFyZ3MsIHR5cGUpIHtcbiAgLy8gVE9ETyBkcml2ZXIgY29uZmlnIGZpbGUgc2hvdWxkIGJlIGxvY2tlZCB3aGlsZSBhbnkgb2YgdGhlc2UgY29tbWFuZHMgYXJlXG4gIC8vIHJ1bm5pbmcgdG8gcHJldmVudCB3ZWlyZCBzaXR1YXRpb25zXG4gIGxldCBqc29uUmVzdWx0ID0gbnVsbDtcbiAgY29uc3QgZXh0Q21kID0gYXJnc1tgJHt0eXBlfUNvbW1hbmRgXTtcbiAgaWYgKCFleHRDbWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW5ub3QgY2FsbCAke3R5cGV9IGNvbW1hbmQgd2l0aG91dCBhIHN1YmNvbW1hbmQgbGlrZSAnaW5zdGFsbCdgKTtcbiAgfVxuICBsZXQge2pzb24sIHN1cHByZXNzT3V0cHV0LCBhcHBpdW1Ib21lfSA9IGFyZ3M7XG4gIGlmIChzdXBwcmVzc091dHB1dCkge1xuICAgIGpzb24gPSB0cnVlO1xuICB9XG4gIGNvbnN0IGxvZ0ZuID0gKG1zZykgPT4gbG9nKGpzb24sIG1zZyk7XG4gIGNvbnN0IENvbmZpZ0NsYXNzID0gdHlwZSA9PT0gRFJJVkVSX1RZUEUgPyBEcml2ZXJDb25maWcgOiBQbHVnaW5Db25maWc7XG4gIGNvbnN0IENvbW1hbmRDbGFzcyA9IHR5cGUgPT09IERSSVZFUl9UWVBFID8gRHJpdmVyQ29tbWFuZCA6IFBsdWdpbkNvbW1hbmQ7XG4gIGNvbnN0IGNvbmZpZyA9IG5ldyBDb25maWdDbGFzcyhhcHBpdW1Ib21lLCBsb2dGbik7XG4gIGNvbnN0IGNtZCA9IG5ldyBDb21tYW5kQ2xhc3Moe2NvbmZpZywganNvbn0pO1xuICB0cnkge1xuICAgIGF3YWl0IGNvbmZpZy5yZWFkKCk7XG4gICAganNvblJlc3VsdCA9IGF3YWl0IGNtZC5leGVjdXRlKGFyZ3MpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBpbiB0aGUgc3VwcHJlc3Mgb3V0cHV0IGNhc2UsIHdlIGFyZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gaW50ZXJuYWxseSBhbmQgc2hvdWxkXG4gICAgLy8ganVzdCB0aHJvdyBpbnN0ZWFkIG9mIHByaW50aW5nIGFuIGVycm9yIGFuZCBlbmRpbmcgdGhlIHByb2Nlc3NcbiAgICBpZiAoc3VwcHJlc3NPdXRwdXQpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgZXJyQW5kUXVpdChqc29uLCBlcnIpO1xuICB9XG5cbiAgaWYgKGpzb24gJiYgIXN1cHByZXNzT3V0cHV0KSB7XG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoanNvblJlc3VsdCwgbnVsbCwgSlNPTl9TUEFDRVMpKTtcbiAgfVxuXG4gIHJldHVybiBqc29uUmVzdWx0O1xufVxuXG5leHBvcnQge1xuICBydW5FeHRlbnNpb25Db21tYW5kLFxufTtcbiJdLCJmaWxlIjoibGliL2NsaS9leHRlbnNpb24uanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
