"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getDefaultServerArgs = getDefaultServerArgs;
exports.getParser = getParser;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _argparse = require("argparse");

var _args = require("./args");

var _extensionConfig = require("../extension-config");

var _utils = require("../utils");

var _support = require("@appium/support");

function makeDebugParser(parser) {
  parser.exit = (status, message = undefined) => {
    throw new Error(message);
  };
}

function getParser(debug = false) {
  const parser = new _argparse.ArgumentParser({
    add_help: true,
    description: 'A webdriver-compatible server for use with native and hybrid iOS and Android applications.',
    prog: process.argv[1] ? _path.default.basename(process.argv[1]) : 'appium'
  });

  if (debug) {
    makeDebugParser(parser);
  }

  parser.add_argument('-v', '--version', {
    action: 'version',
    version: _support.fs.readPackageJsonFrom(_utils.rootDir).version
  });
  const subParsers = parser.add_subparsers({
    dest: 'subcommand'
  });
  const serverArgs = addServerToParser(_args.sharedArgs, subParsers, debug);
  parser.rawArgs = serverArgs;
  addExtensionsToParser(_args.sharedArgs, subParsers, debug);
  parser._parse_args = parser.parse_args.bind(parser);

  parser.parse_args = function (args, namespace) {
    if (_lodash.default.isUndefined(args)) {
      args = [...process.argv.slice(2)];
    }

    if (!_lodash.default.includes([_extensionConfig.DRIVER_TYPE, _extensionConfig.PLUGIN_TYPE, 'server', '-h', '--help', '-v', '--version'], args[0])) {
      args.splice(0, 0, 'server');
    }

    return this._parse_args(args, namespace);
  }.bind(parser);

  return parser;
}

function addServerToParser(sharedArgs, subParsers, debug = false) {
  const serverParser = subParsers.add_parser('server', {
    add_help: true,
    help: 'Run an Appium server'
  });

  if (debug) {
    makeDebugParser(serverParser);
  }

  for (const [flagsOrNames, opts] of [...sharedArgs, ..._args.serverArgs]) {
    serverParser.add_argument(...flagsOrNames, { ...opts
    });
  }

  return _args.serverArgs;
}

function getDefaultServerArgs() {
  let defaults = {};

  for (let [, arg] of _args.serverArgs) {
    defaults[arg.dest] = arg.default;
  }

  return defaults;
}

function addExtensionsToParser(sharedArgs, subParsers, debug = false) {
  for (const type of [_extensionConfig.DRIVER_TYPE, _extensionConfig.PLUGIN_TYPE]) {
    const extParser = subParsers.add_parser(type, {
      add_help: true,
      help: `Access the ${type} management CLI commands`
    });

    if (debug) {
      makeDebugParser(extParser);
    }

    const extSubParsers = extParser.add_subparsers({
      dest: `${type}Command`
    });
    const parserSpecs = [{
      command: 'list',
      args: _args.extensionArgs[type].list,
      help: `List available and installed ${type}s`
    }, {
      command: 'install',
      args: _args.extensionArgs[type].install,
      help: `Install a ${type}`
    }, {
      command: 'uninstall',
      args: _args.extensionArgs[type].uninstall,
      help: `Uninstall a ${type}`
    }, {
      command: 'update',
      args: _args.extensionArgs[type].update,
      help: `Update installed ${type}s to the latest version`
    }, {
      command: 'run',
      args: _args.extensionArgs[type].run,
      help: `Run a script (defined inside the ${type}'s package.json under the ` + `“scripts” field inside the “appium” field) from an installed ${type}`
    }];

    for (const {
      command,
      args,
      help
    } of parserSpecs) {
      const parser = extSubParsers.add_parser(command, {
        help
      });

      if (debug) {
        makeDebugParser(parser);
      }

      for (const [flagsOrNames, opts] of [...sharedArgs, ...args]) {
        parser.add_argument(...flagsOrNames, { ...opts
        });
      }
    }
  }
}

var _default = getParser;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
