"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.APPIUM_VER = void 0;
exports.checkNodeOk = checkNodeOk;
exports.checkValidPort = checkValidPort;
exports.getBuildInfo = getBuildInfo;
exports.getDeprecatedArgs = getDeprecatedArgs;
exports.getGitRev = getGitRev;
exports.getNonDefaultArgs = getNonDefaultArgs;
exports.showConfig = showConfig;
exports.updateBuildInfo = updateBuildInfo;
exports.validateServerArgs = validateServerArgs;
exports.validateTmpDir = validateTmpDir;
exports.warnNodeDeprecations = warnNodeDeprecations;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

var _axios = _interopRequireDefault(require("axios"));

var _teen_process = require("teen_process");

var _utils = require("./utils");

var _logger = _interopRequireDefault(require("./logger"));

var _semver = _interopRequireDefault(require("semver"));

var _argparseActions = require("./cli/argparse-actions");

var _findUp = _interopRequireDefault(require("find-up"));

const npmPackage = _support.fs.readPackageJsonFrom(__dirname);

const APPIUM_VER = npmPackage.version;
exports.APPIUM_VER = APPIUM_VER;
const MIN_NODE_VERSION = npmPackage.engines.node;
const GIT_META_ROOT = '.git';
const GIT_BINARY = `git${_support.system.isWindows() ? '.exe' : ''}`;
const GITHUB_API = 'https://api.github.com/repos/appium/appium';
const BUILD_INFO = {
  version: APPIUM_VER
};

function getNodeVersion() {
  return _semver.default.coerce(process.version);
}

function isSubClass(candidateClass, superClass) {
  return _lodash.default.isFunction(superClass) && _lodash.default.isFunction(candidateClass) && (candidateClass.prototype instanceof superClass || candidateClass === superClass);
}

async function updateBuildInfo(useGithubApiFallback = false) {
  const sha = await getGitRev(useGithubApiFallback);

  if (!sha) {
    return;
  }

  BUILD_INFO['git-sha'] = sha;
  const built = await getGitTimestamp(sha, useGithubApiFallback);

  if (!_lodash.default.isEmpty(built)) {
    BUILD_INFO.built = built;
  }
}

async function findGitRoot() {
  return await (0, _findUp.default)(GIT_META_ROOT, {
    cwd: _utils.rootDir,
    type: 'directory'
  });
}

async function getGitRev(useGithubApiFallback = false) {
  const gitRoot = await findGitRoot();

  if (gitRoot) {
    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(GIT_BINARY, ['rev-parse', 'HEAD'], {
        cwd: gitRoot
      });
      return stdout.trim();
    } catch (ign) {}
  }

  if (!useGithubApiFallback) {
    return null;
  }

  try {
    const resBodyObj = (await _axios.default.get(`${GITHUB_API}/tags`, {
      headers: {
        'User-Agent': `Appium ${APPIUM_VER}`
      }
    })).data;

    if (_lodash.default.isArray(resBodyObj)) {
      for (const {
        name,
        commit
      } of resBodyObj) {
        if (name === `v${APPIUM_VER}` && commit && commit.sha) {
          return commit.sha;
        }
      }
    }
  } catch (ign) {}

  return null;
}

async function getGitTimestamp(commitSha, useGithubApiFallback = false) {
  const gitRoot = await findGitRoot();

  if (gitRoot) {
    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(GIT_BINARY, ['show', '-s', '--format=%ci', commitSha], {
        cwd: gitRoot
      });
      return stdout.trim();
    } catch (ign) {}
  }

  if (!useGithubApiFallback) {
    return null;
  }

  try {
    const resBodyObj = (await _axios.default.get(`${GITHUB_API}/commits/${commitSha}`, {
      headers: {
        'User-Agent': `Appium ${APPIUM_VER}`
      }
    })).data;

    if (resBodyObj && resBodyObj.commit) {
      if (resBodyObj.commit.committer && resBodyObj.commit.committer.date) {
        return resBodyObj.commit.committer.date;
      }

      if (resBodyObj.commit.author && resBodyObj.commit.author.date) {
        return resBodyObj.commit.author.date;
      }
    }
  } catch (ign) {}

  return null;
}

function getBuildInfo() {
  return BUILD_INFO;
}

function checkNodeOk() {
  const version = getNodeVersion();

  if (!_semver.default.satisfies(version, MIN_NODE_VERSION)) {
    _logger.default.errorAndThrow(`Node version must be ${MIN_NODE_VERSION}. Currently ${version.version}`);
  }
}

function warnNodeDeprecations() {}

async function showConfig() {
  await updateBuildInfo(true);
  console.log(JSON.stringify(getBuildInfo()));
}

function getNonDefaultArgs(parser, args) {
  return parser.rawArgs.reduce((acc, [, {
    dest,
    default: defaultValue
  }]) => {
    if (args[dest] && args[dest] !== defaultValue) {
      acc[dest] = args[dest];
    }

    return acc;
  }, {});
}

function getDeprecatedArgs(parser, args) {
  return parser.rawArgs.reduce((acc, [[name], {
    dest,
    default: defaultValue,
    action
  }]) => {
    if (!args[dest] || args[dest] === defaultValue) {
      return acc;
    }

    if (action !== null && action !== void 0 && action.deprecated_for) {
      acc[name] = action.deprecated_for;
    } else if (isSubClass(action, _argparseActions.StoreDeprecatedDefaultCapabilityAction)) {
      acc[name] = _argparseActions.DEFAULT_CAPS_ARG;
    }

    return acc;
  }, {});
}

function checkValidPort(port, portName) {
  if (port > 0 && port < 65536) return true;

  _logger.default.error(`Port '${portName}' must be greater than 0 and less than 65536. Currently ${port}`);

  return false;
}

function validateServerArgs(parser, args) {
  let exclusives = [['noReset', 'fullReset'], ['ipa', 'safari'], ['app', 'safari'], ['forceIphone', 'forceIpad'], ['deviceName', 'defaultDevice']];

  for (let exSet of exclusives) {
    let numFoundInArgs = 0;

    for (let opt of exSet) {
      if (_lodash.default.has(args, opt) && args[opt]) {
        numFoundInArgs++;
      }
    }

    if (numFoundInArgs > 1) {
      throw new Error(`You can't pass in more than one argument from the ` + `set ${JSON.stringify(exSet)}, since they are ` + `mutually exclusive`);
    }
  }

  const validations = {
    port: checkValidPort,
    callbackPort: checkValidPort,
    bootstrapPort: checkValidPort,
    chromedriverPort: checkValidPort,
    robotPort: checkValidPort,
    backendRetries: r => r >= 0
  };
  const nonDefaultArgs = getNonDefaultArgs(parser, args);

  for (let [arg, validator] of _lodash.default.toPairs(validations)) {
    if (_lodash.default.has(nonDefaultArgs, arg)) {
      if (!validator(args[arg], arg)) {
        throw new Error(`Invalid argument for param ${arg}: ${args[arg]}`);
      }
    }
  }
}

async function validateTmpDir(tmpDir) {
  try {
    await (0, _support.mkdirp)(tmpDir);
  } catch (e) {
    throw new Error(`We could not ensure that the temp dir you specified ` + `(${tmpDir}) exists. Please make sure it's writeable.`);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
